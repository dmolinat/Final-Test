"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const bcryptjs = require('bcryptjs');
const Env_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Env"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const Rol_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Rol"));
class UsersContUserler {
    async login({ request, response }) {
        const email = request.input('email');
        const password = request.input('password');
        try {
            const user = await User_1.default.findBy('email', email);
            if (!user) {
                return response.status(400).json({ state: false, message: "email invalido." });
            }
            const validPassword = bcryptjs.compareSync(password, user.password);
            if (!validPassword) {
                return response.status(400).json({ msj: 'Los datos de acceso no son correctos' });
            }
            const payload = {
                nombres: user.first_name,
                id: user.id,
                cedula: user.document_number,
            };
            const token = await this.generarToken(payload);
            const user_rol = await Rol_1.default.findBy('id', user.rol_id);
            if (!user_rol) {
                return response.status(400).json({ message: "ROL NOT FOUND" });
            }
            console.log(`token for test -> ${token}`);
            response.status(200).json({
                state: user.state,
                id: user.id,
                name: (user.first_name).concat(" ", user.second_name, " ", user.surname, " ", user.second_sur_name),
                role: user_rol.name,
                msg: "Ingreso exitoso",
            });
        }
        catch (error) {
            response.json({ state: false, message: "password or email invalid." });
        }
    }
    async generarToken(payload) {
        const opciones = { expiresIn: "30 mins" };
        return jsonwebtoken_1.default.sign(payload, Env_1.default.get('JWT_SECRET_KEY'), opciones);
    }
    async verificarToken(authorizationHeader) {
        let token = authorizationHeader.split(' ')[1];
        jsonwebtoken_1.default.verify(token, Env_1.default.get('JWT_SECRET_KEY'), (e) => {
            if (e) {
                console.log(`e token expirado -> ${e}`);
                throw new Error('Token expirado');
            }
        });
        return true;
    }
    async createUser({ request, response }) {
        try {
            const data_User = request.all();
            const UserObj = new User_1.default();
            UserObj.first_name = data_User.firstName;
            UserObj.second_name = data_User.secondName;
            UserObj.surname = data_User.surname;
            UserObj.second_sur_name = data_User.secondSurName;
            UserObj.type_document = data_User.typeDocument;
            UserObj.document_number = data_User.documentNumber;
            UserObj.email = data_User.email;
            const salt = bcryptjs.genSaltSync();
            UserObj.password = bcryptjs.hashSync(data_User.password, salt);
            UserObj.rol_id = (Math.floor(Math.random() * 2) + 1);
            UserObj.phone = data_User.phone;
            UserObj.state = true;
            await UserObj.save();
            return response.status(200).json({ "state": true, "message": "Estudiante creado exitosamente" });
        }
        catch (e) {
            console.log(`e -> ${e}`);
            return response.status(500).json({ "state": false, "message": "Fallo en la creaciÃ³n del estudiante" });
        }
    }
    async getUsers({ response }) {
        try {
            const L_User = await User_1.default.query().select('first_name', 'second_name', 'surname', 'second_sur_name', 'type_document', 'document_number', 'email', 'phone').where({});
            return response.status(200).json({ "state": true, "message": "Listado de estudiantes", "users": L_User });
        }
        catch (e) {
            console.log(`e-> ${e}`);
            return response.status(500).json({ "state": false, "message": "Fallo en el listado de estudiantes" });
        }
    }
    async updateUser({ request, response }) {
        const id_User = request.param('id_user');
        const data_User = request.all();
        try {
            await User_1.default.query().where('id', id_User).update({
                first_name: data_User.firstName,
                second_name: data_User.secondName,
                surname: data_User.surname,
                second_sur_name: data_User.secondSurName,
                type_document: data_User.typeDocument,
                document_number: data_User.documentNumber,
                email: data_User.email,
                password: data_User.password,
                rol_id: data_User.rolId,
                phone: data_User.phone,
                state: data_User.state
            });
            return response.status(200).json({
                "state": true, "message": "Se actualizo correctamente"
            });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al actualizar" });
        }
    }
    async getUser({ request, response }) {
        const id = request.param('id_user');
        try {
            const user = await User_1.default.query().select('first_name', 'second_name', 'surname', 'second_sur_name', 'type_document', 'document_number', 'email', 'phone').where('id', id);
            return response.status(200).json(user);
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al consultar el detalle del usuario" });
        }
    }
    getPayload(authorizationHeader) {
        let token = authorizationHeader.split(' ')[1];
        const payload = jsonwebtoken_1.default.verify(token, Env_1.default.get("JWT_SECRET_KEY"), { complete: true }).payload;
        return payload;
    }
}
exports.default = UsersContUserler;
//# sourceMappingURL=data:application/json;base64,
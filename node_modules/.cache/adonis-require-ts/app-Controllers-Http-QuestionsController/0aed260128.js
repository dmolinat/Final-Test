"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Question_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Question"));
const AnswersController_1 = __importDefault(require("./AnswersController"));
class QuestionsController {
    async createQuestions({ request, response }) {
        try {
            const data_question = request.all();
            const questionObj = new Question_1.default();
            questionObj.question = data_question.question;
            questionObj.options = JSON.stringify(data_question.options);
            questionObj.state = true;
            await questionObj.save();
            const answerObj = new AnswersController_1.default();
            answerObj.createAnswerQuestion(questionObj.id, data_question.options);
            return response.status(200).json({ "state": true, "message": "Pregunta creada exitosamente" });
        }
        catch (e) {
            console.log(`e -> ${e}`);
            return response.status(500).json({ "state": false, "message": "Error al crear la pregunta" });
        }
    }
    async getQuestions({ response }) {
        try {
            const L_question = await Question_1.default.query().select('question', 'id').where('state', true);
            return response.status(200).json({ "state": true, "questions": L_question });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al listar las preguntas" });
        }
    }
    async deleteQuestion({ request, response }) {
        const id = request.param('id_question');
        try {
            await Question_1.default.query().delete().where('id', id);
            return response.status(200).json({ "state": true, "message": "Pregunta eliminada con exito" });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al eliminar la pregunta" });
        }
    }
    async updateQuestion({ request, response }) {
        const id_question = request.param('id_question');
        const { question, options, state } = request.all();
        try {
            await Question_1.default.query().where('id', id_question).update({
                question: question,
                options: options,
                state: state
            });
            return response.status(200).json({
                "state": true, "message": "Pregunta Editada con exito"
            });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al editar la pregunta" });
        }
    }
    async updateQuestionNewAnswer(id_question, options) {
        try {
            await Question_1.default.query().where('id', id_question).update({
                options: JSON.stringify(options),
            });
        }
        catch (e) {
            console.log(`ERROR EN ACTUALIZACION DE RESPUESTA -> ${e}`);
        }
    }
}
exports.default = QuestionsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVlc3Rpb25zQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlF1ZXN0aW9uc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSx5RkFBMkM7QUFDM0MsNEVBQW9EO0FBRXBELE1BQXFCLG1CQUFtQjtJQUMvQixLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBc0I7UUFDbkUsSUFBRztZQUNELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNwQyxNQUFNLFdBQVcsR0FBRyxJQUFJLGtCQUFRLEVBQUUsQ0FBQztZQUNuQyxXQUFXLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7WUFDOUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1RCxXQUFXLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUN6QixNQUFNLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUV6QixNQUFNLFNBQVMsR0FBRyxJQUFJLDJCQUFpQixFQUFFLENBQUE7WUFDekMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ3BFLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLFNBQVMsRUFBRSw4QkFBOEIsRUFBQyxDQUFDLENBQUE7U0FDNUY7UUFBQSxPQUFNLENBQUMsRUFBQztZQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ3hCLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMs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Q1AsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUMzRDtJQUNILENBQUM7Q0FDRjtBQWpFRCxzQ0FpRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IFF1ZXN0aW9uIGZyb20gJ0FwcC9Nb2RlbHMvUXVlc3Rpb24nO1xuaW1wb3J0IEFuc3dlcnNDb250cm9sbGVyIGZyb20gJy4vQW5zd2Vyc0NvbnRyb2xsZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWVzdGlvbnNDb250cm9sbGVyIHtcbiAgcHVibGljIGFzeW5jIGNyZWF0ZVF1ZXN0aW9ucyh7cmVxdWVzdCwgcmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICB0cnl7XG4gICAgICBjb25zdCBkYXRhX3F1ZXN0aW9uID0gcmVxdWVzdC5hbGwoKTtcbiAgICAgIGNvbnN0IHF1ZXN0aW9uT2JqID0gbmV3IFF1ZXN0aW9uKCk7XG4gICAgICBxdWVzdGlvbk9iai5xdWVzdGlvbiA9IGRhdGFfcXVlc3Rpb24ucXVlc3Rpb247XG4gICAgICBxdWVzdGlvbk9iai5vcHRpb25zID0gSlNPTi5zdHJpbmdpZnkoZGF0YV9xdWVzdGlvbi5vcHRpb25zKTtcbiAgICAgIHF1ZXN0aW9uT2JqLnN0YXRlID0gdHJ1ZTtcbiAgICAgIGF3YWl0IHF1ZXN0aW9uT2JqLnNhdmUoKTtcblxuICAgICAgY29uc3QgYW5zd2VyT2JqID0gbmV3IEFuc3dlcnNDb250cm9sbGVyKClcbiAgICAgIGFuc3dlck9iai5jcmVhdGVBbnN3ZXJRdWVzdGlvbihxdWVzdGlvbk9iai5pZCxkYXRhX3F1ZXN0aW9uLm9wdGlvbnMpXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbih7XCJzdGF0ZVwiOiB0cnVlLFwibWVzc2FnZVwiOiBcIlByZWd1bnRhIGNyZWFkYSBleGl0b3NhbWVudGVcIn0pXG4gICAgfWNhdGNoKGUpe1xuICAgICAgY29uc29sZS5sb2coYGUgLT4gJHtlfWApXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMCkuanNvbih7XCJzdGF0ZVwiOiBmYWxzZSwgXCJtZXNzYWdlXCI6IFwiRXJyb3IgYWwgY3JlYXIgbGEgcHJlZ3VudGFcIn0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFF1ZXN0aW9ucyh7cmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICB0cnl7XG4gICAgICBjb25zdCBMX3F1ZXN0aW9uID0gYXdhaXQgUXVlc3Rpb24ucXVlcnkoKS5zZWxlY3QoJ3F1ZXN0aW9uJywgJ2lkJykud2hlcmUoJ3N0YXRlJyx0cnVlKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKHtcInN0YXRlXCI6IHRydWUsIFwicXVlc3Rpb25zXCI6IExfcXVlc3Rpb259KVxuICAgIH1jYXRjaChlKXtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNTAwKS5qc29uKHtcInN0YXRlXCI6IGZhbHNlLCBcIm1lc3NhZ2VcIjogXCJFcnJvciBhbCBsaXN0YXIgbGFzIHByZWd1bnRhc1wifSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlUXVlc3Rpb24oe3JlcXVlc3QscmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICBjb25zdCBpZCA9IHJlcXVlc3QucGFyYW0oJ2lkX3F1ZXN0aW9uJylcbiAgICB0cnl7XG4gICAgICBhd2FpdCBRdWVzdGlvbi5xdWVyeSgpLmRlbGV0ZSgpLndoZXJlKCdpZCcsaWQpXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbih7XCJzdGF0ZVwiOiB0cnVlLCBcIm1lc3NhZ2VcIjogXCJQcmVndW50YSBlbGltaW5hZGEgY29uIGV4aXRvXCJ9KVxuICAgIH1jYXRjaChlKXtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGUpIE9LXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMCkuanNvbih7XCJzdGF0ZVwiOiBmYWxzZSxcIm1lc3NhZ2VcIjogXCJFcnJvciBhbCBlbGltaW5hciBsYSBwcmVndW50YVwifSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlUXVlc3Rpb24oe3JlcXVlc3QscmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICBjb25zdCBpZF9xdWVzdGlvbj1yZXF1ZXN0LnBhcmFtKCdpZF9xdWVzdGlvbicpO1xuICAgIGNvbnN0IHtxdWVzdGlvbixvcHRpb25zLHN0YXRlfSA9IHJlcXVlc3QuYWxsKCk7XG4gICAgdHJ5e1xuICAgICAgYXdhaXQgUXVlc3Rpb24ucXVlcnkoKS53aGVyZSgnaWQnLGlkX3F1ZXN0aW9uKS51cGRhdGUoe1xuICAgICAgICBxdWVzdGlvbjogcXVlc3Rpb24sXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKCB7XG4gICAgICBcInN0YXRlXCI6IHRydWUsIFwibWVzc2FnZVwiOiBcIlByZWd1bnRhIEVkaXRhZGEgY29uIGV4aXRvXCJ9KVxuICAgIH1jYXRjaChlKXtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNTAwKS5qc29uKHtcInN0YXRlXCI6IGZhbHNlLFwibWVzc2FnZVwiOiBcIkVycm9yIGFsIGVkaXRhciBsYSBwcmVndW50YVwifSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlUXVlc3Rpb25OZXdBbnN3ZXIoaWRfcXVlc3Rpb24sb3B0aW9ucyl7XG5cbiAgICB0cnl7XG4gICAgICBhd2FpdCBRdWVzdGlvbi5xdWVyeSgpLndoZXJlKCdpZCcsaWRfcXVlc3Rpb24pLnVwZGF0ZSh7XG4gICAgICAgIG9wdGlvbnM6IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpLFxuICAgIH0pO1xuICAgIH1jYXRjaChlKXtcbiAgICAgIGNvbnNvbGUubG9nKGBFUlJPUiBFTiBBQ1RVQUxJWkFDSU9OIERFIFJFU1BVRVNUQSAtPiAke2V9YClcbiAgICB9XG4gIH1cbn1cbiJdfQ==
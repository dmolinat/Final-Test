"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Rol_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Rol"));
class RolesController {
    async createRol({ request, response }) {
        try {
            const data_Rol = request.all();
            const RolObj = new Rol_1.default();
            RolObj.id = data_Rol.id;
            RolObj.name = data_Rol.name;
            RolObj.state = data_Rol.state;
            await RolObj.save();
            return response.status(200).json({ "state": true, "message": "Rol creado exitosamente" });
        }
        catch (e) {
            console.log(`e -> ${e}`);
            return response.status(500).json({ "state": false, "message": "Error al crear Rol" });
        }
    }
    async getRol({ response }) {
        try {
            const L_Rol = await Rol_1.default.query().select('id', 'name').where('state', true);
            return response.status(200).json({ "state": true, "Roles": L_Rol });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al listar roles" });
        }
    }
    async deleteRol({ request, response }) {
        const id = request.param('id_rol');
        try {
            await Rol_1.default.query().delete().where('id', id);
            return response.status(200).json({ "state": true, "message": "Rol eliminado con exito" });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al eliminar Rol" });
        }
    }
    async updateRol({ request, response }) {
        const id_Rol = request.param('id_rol');
        const { name, state } = request.all();
        try {
            await Rol_1.default.query().where('id', id_Rol).update({
                name: name,
                state: state
            });
            return response.status(200).json({
                "state": true, "message": "Rol editado con exito"
            });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al editar Rol" });
        }
    }
}
exports.default = RolesController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm9sZXNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUm9sZXNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsK0VBQWlDO0FBRWpDLE1BQXFCLGVBQWU7SUFDM0IsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXNCO1FBQzdELElBQUc7WUFDRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDL0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxhQUFHLEVBQUUsQ0FBQztZQUN6QixNQUFNLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDeEIsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUM5QixNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxTQUFTLEVBQUUseUJBQXlCLEVBQUMsQ0FBQyxDQUFBO1NBQ3ZGO1FBQUEsT0FBTSxDQUFDLEVBQUM7WUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUN4QixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsb0JBQW9CLEVBQUMsQ0FBQyxDQUFBO1NBQ3BGO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBQyxRQUFRLEVBQXNCO1FBQ2pELElBQUc7WUFDRCxNQUFNLEtBQUssR0FBRyxNQUFNLGFBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLENBQUM7WUFDekUsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUE7U0FDbEU7UUFBQSxPQUFNLENBQUMsRUFBQztZQUNQLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBQyxDQUFDLENBQUE7U0FDdkY7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQXNCO1FBQzVELE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDbEMsSUFBRztZQUNELE1BQU0sYUFBRyxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsRUFBRSxDQUFDLENBQUE7WUFDekMsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLHlCQUF5QixFQUFDLENBQUMsQ0FBQTtTQUN4RjtRQUFBLE9BQU0sQ0FBQyxFQUFDO1lBQ1AsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUMsU0FBUyxFQUFFLHVCQUF1QixFQUFDLENBQUMsQ0FBQTtTQUN0RjtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBc0I7UUFDNUQsTUFBTSxNQUFNLEdBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQyxNQUFNLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNuQyxJQUFHO1lBQ0QsTUFBTSxhQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQzFDLElBQUksRUFBRSxJQUFJO2dCQUNWLEtBQUssRUFBRSxLQUFLO2FBQ2YsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBRTtnQkFDaEMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsdUJBQXVCO2FBQUMsQ0FBQyxDQUFBO1NBQ3BEO1FBQUEsT0FBTSxDQUFDLEVBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBQyxTQUFTLEVBQUUscUJBQXFCLEVBQUMsQ0FBQyxDQUFBO1NBQ3BGO0lBQ0gsQ0FBQztDQUdGO0FBbkRELGtDQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgUm9sIGZyb20gJ0FwcC9Nb2RlbHMvUm9sJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9sZXNDb250cm9sbGVyIHtcbiAgcHVibGljIGFzeW5jIGNyZWF0ZVJvbCh7cmVxdWVzdCwgcmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICB0cnl7XG4gICAgICBjb25zdCBkYXRhX1JvbCA9IHJlcXVlc3QuYWxsKCk7XG4gICAgICBjb25zdCBSb2xPYmogPSBuZXcgUm9sKCk7XG4gICAgICBSb2xPYmouaWQgPSBkYXRhX1JvbC5pZDtcbiAgICAgIFJvbE9iai5uYW1lID0gZGF0YV9Sb2wubmFtZTtcbiAgICAgIFJvbE9iai5zdGF0ZSA9IGRhdGFfUm9sLnN0YXRlO1xuICAgICAgYXdhaXQgUm9sT2JqLnNhdmUoKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKHtcInN0YXRlXCI6IHRydWUsXCJtZXNzYWdlXCI6IFwiUm9sIGNyZWFkbyBleGl0b3NhbWVudGVcIn0pXG4gICAgfWNhdGNoKGUpe1xuICAgICAgY29uc29sZS5sb2coYGUgLT4gJHtlfWApXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMCkuanNvbih7XCJzdGF0ZVwiOiBmYWxzZSwgXCJtZXNzYWdlXCI6IFwiRXJyb3IgYWwgY3JlYXIgUm9sXCJ9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRSb2woe3Jlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgdHJ5e1xuICAgICAgY29uc3QgTF9Sb2wgPSBhd2FpdCBSb2wucXVlcnkoKS5zZWxlY3QoJ2lkJywgJ25hbWUnKS53aGVyZSgnc3RhdGUnLHRydWUpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDApLmpzb24oe1wic3RhdGVcIjogdHJ1ZSwgXCJSb2xlc1wiOiBMX1JvbH0pXG4gICAgfWNhdGNoKGUpe1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDApLmpzb24oe1wic3RhdGVcIjogZmFsc2UsIFwibWVzc2FnZVwiOiBcIkVycm9yIGFsIGxpc3RhciByb2xlc1wifSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlUm9sKHtyZXF1ZXN0LHJlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgY29uc3QgaWQgPSByZXF1ZXN0LnBhcmFtKCdpZF9yb2wnKVxuICAgIHRyeXtcbiAgICAgIGF3YWl0IFJvbC5xdWVyeSgpLmRlbGV0ZSgpLndoZXJlKCdpZCcsaWQpXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbih7XCJzdGF0ZVwiOiB0cnVlLCBcIm1lc3NhZ2VcIjogXCJSb2wgZWxpbWluYWRvIGNvbiBleGl0b1wifSlcbiAgICB9Y2F0Y2goZSl7XG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMCkuanNvbih7XCJzdGF0ZVwiOiBmYWxzZSxcIm1lc3NhZ2VcIjogXCJFcnJvciBhbCBlbGltaW5hciBSb2xcIn0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZVJvbCh7cmVxdWVzdCxyZXNwb25zZX06IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgIGNvbnN0IGlkX1JvbD1yZXF1ZXN0LnBhcmFtKCdpZF9yb2wnKTtcbiAgICBjb25zdCB7bmFtZSxzdGF0ZX0gPSByZXF1ZXN0LmFsbCgpO1xuICAgIHRyeXtcbiAgICAgIGF3YWl0IFJvbC5xdWVyeSgpLndoZXJlKCdpZCcsaWRfUm9sKS51cGRhdGUoe1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbigge1xuICAgICAgXCJzdGF0ZVwiOiB0cnVlLCBcIm1lc3NhZ2VcIjogXCJSb2wgZWRpdGFkbyBjb24gZXhpdG9cIn0pXG4gICAgfWNhdGNoKGUpe1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDApLmpzb24oe1wic3RhdGVcIjogZmFsc2UsXCJtZXNzYWdlXCI6IFwiRXJyb3IgYWwgZWRpdGFyIFJvbFwifSlcbiAgICB9XG4gIH1cblxuXG59XG4iXX0=
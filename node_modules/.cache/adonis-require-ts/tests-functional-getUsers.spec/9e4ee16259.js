"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const runner_1 = require("@japa/runner");
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const TestGenerarToken_1 = require("./TestGenerarToken");
const bcryptjs = require('bcryptjs');
(0, runner_1.test)('UsersController.getUsers', async ({ client, assert }) => {
    let endpoint = "/api/v1/user/getUsers";
    const user_test = await User_1.default.findBy('email', "1802@hotma.co");
    if (!user_test) {
        const response = await client.get(endpoint).header('Authorization', `Bearer a`);
        response.assertStatus(200);
        assert.isObject(response.body());
    }
    const validPassword = bcryptjs.compareSync("123456", user_test?.password);
    if (!validPassword) {
        const response = await client.get(endpoint).header('Authorization', `Bearer a`);
        response.assertStatus(200);
        assert.isObject(response.body());
    }
    const payload = {
        nombres: user_test?.first_name,
        id: user_test?.id,
        cedula: user_test?.document_number,
    };
    const token = await (0, TestGenerarToken_1.TestGenerarToken)(payload);
    const response = await client.get(endpoint).header('Authorization', `Bearer ${token}`);
    response.assertStatus(200);
    assert.isObject(response.body());
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0VXNlcnMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldFVzZXJzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx5Q0FBbUM7QUFDbkMsaUZBQWtDO0FBQ2xDLHlEQUFxRDtBQUNyRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7QUFFcEMsSUFBQSxhQUFJLEVBQUMsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUU7SUFDekQsSUFBSSxRQUFRLEdBQUcsdUJBQXVCLENBQUE7SUFDdEMsTUFBTSxTQUFTLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBQyxlQUFlLENBQUMsQ0FBQTtJQUU1RCxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2QsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFDL0UsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0tBQ2pDO0lBRUQsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ3pFLElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDbEIsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFDL0UsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0tBQ2pDO0lBRUQsTUFBTSxPQUFPLEdBQUU7UUFDYixPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVU7UUFDOUIsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFO1FBQ2pCLE1BQU0sRUFBRSxTQUFTLEVBQUUsZUFBZTtLQUNuQyxDQUFBO0lBRUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFBLG1DQUFnQixFQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzdDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLFVBQVUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUN0RixRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzFCLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7QUFDbEMsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0ZXN0IH0gZnJvbSAnQGphcGEvcnVubmVyJ1xuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xuaW1wb3J0IHsgVGVzdEdlbmVyYXJUb2tlbiB9IGZyb20gJy4vVGVzdEdlbmVyYXJUb2tlbidcbmNvbnN0IGJjcnlwdGpzID0gcmVxdWlyZSgnYmNyeXB0anMnKVxuXG50ZXN0KCdVc2Vyc0NvbnRyb2xsZXIuZ2V0VXNlcnMnLCBhc3luYyAoe2NsaWVudCxhc3NlcnR9KSA9PiB7XG4gIGxldCBlbmRwb2ludCA9IFwiL2FwaS92MS91c2VyL2dldFVzZXJzXCJcbiAgY29uc3QgdXNlcl90ZXN0ID0gYXdhaXQgVXNlci5maW5kQnkoJ2VtYWlsJyxcIjE4MDJAaG90bWEuY29cIilcblxuICBpZiAoIXVzZXJfdGVzdCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldChlbmRwb2ludCkuaGVhZGVyKCdBdXRob3JpemF0aW9uJywgYEJlYXJlciBhYClcbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAwKVxuICAgIGFzc2VydC5pc09iamVjdChyZXNwb25zZS5ib2R5KCkpXG4gIH1cblxuICBjb25zdCB2YWxpZFBhc3N3b3JkID0gYmNyeXB0anMuY29tcGFyZVN5bmMoXCIxMjM0NTZcIiwgdXNlcl90ZXN0Py5wYXNzd29yZClcbiAgaWYgKCF2YWxpZFBhc3N3b3JkKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0KGVuZHBvaW50KS5oZWFkZXIoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyIGFgKVxuICAgIHJlc3BvbnNlLmFzc2VydFN0YXR1cygyMDApXG4gICAgYXNzZXJ0LmlzT2JqZWN0KHJlc3BvbnNlLmJvZHkoKSlcbiAgfVxuXG4gIGNvbnN0IHBheWxvYWQgPXtcbiAgICBub21icmVzOiB1c2VyX3Rlc3Q/LmZpcnN0X25hbWUsXG4gICAgaWQ6IHVzZXJfdGVzdD8uaWQsXG4gICAgY2VkdWxhOiB1c2VyX3Rlc3Q/LmRvY3VtZW50X251bWJlcixcbiAgfVxuXG4gIGNvbnN0IHRva2VuID0gYXdhaXQgVGVzdEdlbmVyYXJUb2tlbihwYXlsb2FkKVxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5nZXQoZW5kcG9pbnQpLmhlYWRlcignQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAwKVxuICBhc3NlcnQuaXNPYmplY3QocmVzcG9uc2UuYm9keSgpKVxufSlcbiJdfQ==
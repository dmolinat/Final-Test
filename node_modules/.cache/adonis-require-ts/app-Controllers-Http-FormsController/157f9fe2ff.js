"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Form_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Form"));
const Question_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Question"));
class FormsController {
    async getQuestions({ response }) {
        try {
            const L_questions = await Question_1.default.query().select('question', 'id', 'options').where({ state: true });
            const question_aux = Array();
            for (const i in L_questions) {
                question_aux[question_aux.length] = {
                    question: L_questions[i]['$attributes']['question'],
                    id: L_questions[i]['$attributes']['id'],
                    options: L_questions[i]['$attributes']['options']
                };
            }
            response.status(200).json({ state: true, questions: question_aux });
        }
        catch (e) {
            response.status(500).json({ "state": false, "message": "Error al obtener el listado" });
        }
    }
    async postQuestions({ request, response }) {
        try {
            const form_data = request.all();
            for (const i in form_data.answers) {
                await Form_1.default.create({
                    student_id: form_data.estudianteId,
                    answer_id: form_data.answers[i],
                    state: true
                });
            }
            response.status(200).json({ "state": true, "message": "Respuestas almacenadas con exito" });
        }
        catch (e) {
            response.status(500).json({ "state": false, "message": "No se pudieron almacenar las respuestas" });
        }
    }
}
exports.default = FormsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybXNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRm9ybXNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQW1DO0FBQ25DLHlGQUEwQztBQUUxQyxNQUFxQixlQUFlO0lBQzNCLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBQyxRQUFRLEVBQXNCO1FBQ3ZELElBQUc7WUFDRCxNQUFNLFdBQVcsR0FBRyxNQUFNLGtCQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBQyxJQUFJLEVBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUE7WUFDakcsTUFBTSxZQUFZLEdBQUMsS0FBSyxFQUFFLENBQUM7WUFDM0IsS0FBSSxNQUFNLENBQUMsSUFBSSxXQUFXLEVBQUM7Z0JBQ3pCLFlBQVksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUc7b0JBQ2xDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsVUFBVSxDQUFDO29CQUNuRCxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDdkMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLENBQUM7aUJBQUMsQ0FBQTthQUNyRDtZQUNELFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFDLENBQUMsQ0FBQTtTQUNsRTtRQUFBLE9BQU0sQ0FBQyxFQUFDO1lBQ1AsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSw2QkFBNkIsRUFBQyxDQUFDLENBQUE7U0FDdEY7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQXNCO1FBQ2hFLElBQUc7WUFDRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUE7WUFDN0IsS0FBSSxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFDO2dCQUMvQixNQUFNLGNBQUksQ0FBQyxNQUFNLENBQUM7b0JBQ2hCLFVBQVUsRUFBRSxTQUFTLENBQUMsWUFBWTtvQkFDbEMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO29CQUMvQixLQUFLLEVBQUUsSUFBSTtpQkFDWixDQUFDLENBQUE7YUFDTDtZQUNELFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxTQUFTLEVBQUUsa0NBQWtDLEVBQUMsQ0FBQyxDQUFBO1NBQ3pGO1FBQUEsT0FBTSxDQUFDLEVBQUM7WUFDUCxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLHlDQUF5QyxFQUFDLENBQUMsQ0FBQTtTQUNsRztJQUNILENBQUM7Q0FDRjtBQWhDRCxrQ0FnQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IEZvcm0gZnJvbSAnQXBwL01vZGVscy9Gb3JtJztcbmltcG9ydCBRdWVzdGlvbiBmcm9tICdBcHAvTW9kZWxzL1F1ZXN0aW9uJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3Jtc0NvbnRyb2xsZXIge1xuICBwdWJsaWMgYXN5bmMgZ2V0UXVlc3Rpb25zKHtyZXNwb25zZX06IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgIHRyeXtcbiAgICAgIGNvbnN0IExfcXVlc3Rpb25zID0gYXdhaXQgUXVlc3Rpb24ucXVlcnkoKS5zZWxlY3QoJ3F1ZXN0aW9uJywnaWQnLCdvcHRpb25zJykud2hlcmUoe3N0YXRlOiB0cnVlfSlcbiAgICAgIGNvbnN0IHF1ZXN0aW9uX2F1eD1BcnJheSgpO1xuICAgICAgZm9yKGNvbnN0IGkgaW4gTF9xdWVzdGlvbnMpe1xuICAgICAgICBxdWVzdGlvbl9hdXhbcXVlc3Rpb25fYXV4Lmxlbmd0aF0gPSB7XG4gICAgICAgICAgcXVlc3Rpb246IExfcXVlc3Rpb25zW2ldWyckYXR0cmlidXRlcyddWydxdWVzdGlvbiddLFxuICAgICAgICAgIGlkOiBMX3F1ZXN0aW9uc1tpXVsnJGF0dHJpYnV0ZXMnXVsnaWQnXSxcbiAgICAgICAgICBvcHRpb25zOiBMX3F1ZXN0aW9uc1tpXVsnJGF0dHJpYnV0ZXMnXVsnb3B0aW9ucyddfVxuICAgICAgfVxuICAgICAgcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbih7c3RhdGU6IHRydWUsIHF1ZXN0aW9uczogcXVlc3Rpb25fYXV4fSlcbiAgICB9Y2F0Y2goZSl7XG4gICAgICByZXNwb25zZS5zdGF0dXMoNTAwKS5qc29uKHtcInN0YXRlXCI6IGZhbHNlLCBcIm1lc3NhZ2VcIjogXCJFcnJvciBhbCBvYnRlbmVyIGVsIGxpc3RhZG9cIn0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHBvc3RRdWVzdGlvbnMoe3JlcXVlc3QscmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICB0cnl7XG4gICAgICBjb25zdCBmb3JtX2RhdGEgPSByZXF1ZXN0LmFsbCgpXG4gICAgICAgIGZvcihjb25zdCBpIGluIGZvcm1fZGF0YS5hbnN3ZXJzKXtcbiAgICAgICAgICBhd2FpdCBGb3JtLmNyZWF0ZSh7XG4gICAgICAgICAgICBzdHVkZW50X2lkOiBmb3JtX2RhdGEuZXN0dWRpYW50ZUlkLFxuICAgICAgICAgICAgYW5zd2VyX2lkOiBmb3JtX2RhdGEuYW5zd2Vyc1tpXSxcbiAgICAgICAgICAgIHN0YXRlOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHJlc3BvbnNlLnN0YXR1cygyMDApLmpzb24oe1wic3RhdGVcIjogdHJ1ZSxcIm1lc3NhZ2VcIjogXCJSZXNwdWVzdGFzIGFsbWFjZW5hZGFzIGNvbiBleGl0b1wifSlcbiAgICB9Y2F0Y2goZSl7XG4gICAgICByZXNwb25zZS5zdGF0dXMoNTAwKS5qc29uKHtcInN0YXRlXCI6IGZhbHNlLCBcIm1lc3NhZ2VcIjogXCJObyBzZSBwdWRpZXJvbiBhbG1hY2VuYXIgbGFzIHJlc3B1ZXN0YXNcIn0pXG4gICAgfVxuICB9XG59XG4iXX0=
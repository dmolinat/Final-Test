"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const runner_1 = require("@japa/runner");
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const TestGenerarToken_1 = require("./TestGenerarToken");
const bcryptjs = require('bcryptjs');
(0, runner_1.test)('UsersController.getUser', async ({ client, assert }) => {
    let endpoint = "/api/v1/user/getUser/1";
    const user_test = await User_1.default.findBy('email', "1802@hotma.co");
    if (!user_test) {
        const response = await client.get(endpoint).header('Authorization', `Bearer a`);
        response.assertStatus(200);
        assert.isObject(response.body());
    }
    const validPassword = bcryptjs.compareSync("123456", user_test?.password);
    if (!validPassword) {
        const response = await client.get(endpoint).header('Authorization', `Bearer a`);
        response.assertStatus(200);
        assert.isObject(response.body());
    }
    const payload = {
        nombres: user_test?.first_name,
        id: user_test?.id,
        cedula: user_test?.document_number,
    };
    const token = await (0, TestGenerarToken_1.TestGenerarToken)(payload);
    const response = await client.get(endpoint).header('Authorization', `Bearer ${token}`);
    response.assertStatus(200);
    assert.isArray(response.body());
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0VXNlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0VXNlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUNBQW1DO0FBQ25DLGlGQUFrQztBQUNsQyx5REFBcUQ7QUFDckQsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBRXBDLElBQUEsYUFBSSxFQUFDLHlCQUF5QixFQUFFLEtBQUssRUFBRSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFFO0lBQ3hELElBQUksUUFBUSxHQUFHLHdCQUF3QixDQUFBO0lBQ3ZDLE1BQU0sU0FBUyxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUMsZUFBZSxDQUFDLENBQUE7SUFFNUQsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQy9FLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtLQUNqQztJQUVELE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUN6RSxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2xCLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQy9FLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtLQUNqQztJQUVELE1BQU0sT0FBTyxHQUFFO1FBQ2IsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVO1FBQzlCLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRTtRQUNqQixNQUFNLEVBQUUsU0FBUyxFQUFFLGVBQWU7S0FDbkMsQ0FBQTtJQUVELE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBQSxtQ0FBZ0IsRUFBQyxPQUFPLENBQUMsQ0FBQTtJQUM3QyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxVQUFVLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDdEYsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUMxQixNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVzdCB9IGZyb20gJ0BqYXBhL3J1bm5lcidcbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcidcbmltcG9ydCB7IFRlc3RHZW5lcmFyVG9rZW4gfSBmcm9tICcuL1Rlc3RHZW5lcmFyVG9rZW4nXG5jb25zdCBiY3J5cHRqcyA9IHJlcXVpcmUoJ2JjcnlwdGpzJylcblxudGVzdCgnVXNlcnNDb250cm9sbGVyLmdldFVzZXInLCBhc3luYyAoe2NsaWVudCxhc3NlcnR9KSA9PiB7XG4gIGxldCBlbmRwb2ludCA9IFwiL2FwaS92MS91c2VyL2dldFVzZXIvMVwiXG4gIGNvbnN0IHVzZXJfdGVzdCA9IGF3YWl0IFVzZXIuZmluZEJ5KCdlbWFpbCcsXCIxODAyQGhvdG1hLmNvXCIpXG5cbiAgaWYgKCF1c2VyX3Rlc3QpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5nZXQoZW5kcG9pbnQpLmhlYWRlcignQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgYWApXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMClcbiAgICBhc3NlcnQuaXNPYmplY3QocmVzcG9uc2UuYm9keSgpKVxuICB9XG5cbiAgY29uc3QgdmFsaWRQYXNzd29yZCA9IGJjcnlwdGpzLmNvbXBhcmVTeW5jKFwiMTIzNDU2XCIsIHVzZXJfdGVzdD8ucGFzc3dvcmQpXG4gIGlmICghdmFsaWRQYXNzd29yZCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldChlbmRwb2ludCkuaGVhZGVyKCdBdXRob3JpemF0aW9uJywgYEJlYXJlciBhYClcbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAwKVxuICAgIGFzc2VydC5pc09iamVjdChyZXNwb25zZS5ib2R5KCkpXG4gIH1cblxuICBjb25zdCBwYXlsb2FkID17XG4gICAgbm9tYnJlczogdXNlcl90ZXN0Py5maXJzdF9uYW1lLFxuICAgIGlkOiB1c2VyX3Rlc3Q/LmlkLFxuICAgIGNlZHVsYTogdXNlcl90ZXN0Py5kb2N1bWVudF9udW1iZXIsXG4gIH1cblxuICBjb25zdCB0b2tlbiA9IGF3YWl0IFRlc3RHZW5lcmFyVG9rZW4ocGF5bG9hZClcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0KGVuZHBvaW50KS5oZWFkZXIoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMClcbiAgYXNzZXJ0LmlzQXJyYXkocmVzcG9uc2UuYm9keSgpKVxufSlcbiJdfQ==
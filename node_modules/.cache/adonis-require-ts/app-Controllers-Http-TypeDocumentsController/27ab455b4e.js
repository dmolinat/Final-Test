"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TypeDocument_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/TypeDocument"));
class TypeDocumentsController {
    async createTypeDocument({ request, response }) {
        try {
            const data_typeDocument = request.all();
            const typeDocumentObj = new TypeDocument_1.default();
            typeDocumentObj.id = data_typeDocument.id;
            typeDocumentObj.name = data_typeDocument.name;
            typeDocumentObj.state = data_typeDocument.state;
            await typeDocumentObj.save();
            return response.status(200).json({ "state": true, "message": "Tipo documento creada exitosamente" });
        }
        catch (e) {
            console.log(`e -> ${e}`);
            return response.status(500).json({ "state": false, "message": "Error al crear el tipo de documento" });
        }
    }
    async getTypeDocument({ response }) {
        try {
            const L_typeDocument = await TypeDocument_1.default.query().select('id', 'name').where('state', true);
            return response.status(200).json({ "state": true, "typeDocuments": L_typeDocument });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al listar las Tipo de documentos" });
        }
    }
    async deleteTypeDocument({ request, response }) {
        const id = request.param('id_typeDocument');
        try {
            await TypeDocument_1.default.query().delete().where('id', id);
            return response.status(200).json({ "state": true, "message": "Tipo de documento eliminado con exito" });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al eliminar tipo de documento" });
        }
    }
    async updateTypeDocument({ request, response }) {
        const id_typeDocument = request.param('id_typeDocument');
        const { name, state } = request.all();
        try {
            await TypeDocument_1.default.query().where('id', id_typeDocument).update({
                name: name,
                state: state
            });
            return response.status(200).json({
                "state": true, "message": "Tipo de documento Editada con exito"
            });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al editar la Tipo de documento" });
        }
    }
}
exports.default = TypeDocumentsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZURvY3VtZW50c0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUeXBlRG9jdW1lbnRzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGlHQUFtRDtBQUVuRCxNQUFxQix1QkFBdUI7SUFDbkMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBc0I7UUFDdEUsSUFBRztZQUNELE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3hDLE1BQU0sZUFBZSxHQUFHLElBQUksc0JBQVksRUFBRSxDQUFDO1lBQzNDLGVBQWUsQ0FBQyxFQUFFLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQzFDLGVBQWUsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1lBQzlDLGVBQWUsQ0FBQyxLQUFLLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDO1lBQ2hELE1BQU0sZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzdCLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLFNBQVMsRUFBRSxvQ0FBb0MsRUFBQyxDQUFDLENBQUE7U0FDbEc7UUFBQSxPQUFNLENBQUMsRUFBQztZQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ3hCLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxxQ0FBcUMsRUFBQyxDQUFDLENBQUE7U0FDckc7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLGVBQWUsQ0FBQyxFQUFDLFFBQVEsRUFBc0I7UUFDMUQsSUFBRztZQUNELE1BQU0sY0FBYyxHQUFHLE1BQU0sc0JBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLENBQUM7WUFDM0YsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBQyxDQUFDLENBQUE7U0FDbkY7UUFBQSxPQUFNLENBQUMsRUFBQztZQUNQLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSx3Q0FBd0MsRUFBQyxDQUFDLENBQUE7U0FDeEc7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBc0I7UUFDckUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQzNDLElBQUc7WUFDRCxNQUFNLHNCQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBQyxFQUFFLENBQUMsQ0FBQTtZQUNsRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsdUNBQXVDLEVBQUMsQ0FBQyxDQUFBO1NBQ3RHO1FBQUEsT0FBTSxDQUFDLEVBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBQyxTQUFTLEVBQUUscUNBQXFDLEVBQUMsQ0FBQyxDQUFBO1NBQ3BHO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQXNCO1FBQ3JFLE1BQU0sZUFBZSxHQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN2RCxNQUFNLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNuQyxJQUFHO1lBQ0QsTUFBTSxzQkFBWSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUFDO2dCQUM1RCxJQUFJLEVBQUUsSUFBSTtnQkFDVixLQUFLLEVBQUUsS0FBSzthQUNmLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUU7Z0JBQ2hDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLHFDQUFxQzthQUFDLENBQUMsQ0FBQTtTQUNsRTtRQUFBLE9BQU0sQ0FBQyxFQUFDO1lBQ1AsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUMsU0FBUyxFQUFFLHNDQUFzQyxFQUFDLENBQUMsQ0FBQTtTQUNyRztJQUNILENBQUM7Q0FDRjtBQWpERCwwQ0FpREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IFR5cGVEb2N1bWVudCBmcm9tICdBcHAvTW9kZWxzL1R5cGVEb2N1bWVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR5cGVEb2N1bWVudHNDb250cm9sbGVyIHtcbiAgcHVibGljIGFzeW5jIGNyZWF0ZVR5cGVEb2N1bWVudCh7cmVxdWVzdCwgcmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICB0cnl7XG4gICAgICBjb25zdCBkYXRhX3R5cGVEb2N1bWVudCA9IHJlcXVlc3QuYWxsKCk7XG4gICAgICBjb25zdCB0eXBlRG9jdW1lbnRPYmogPSBuZXcgVHlwZURvY3VtZW50KCk7XG4gICAgICB0eXBlRG9jdW1lbnRPYmouaWQgPSBkYXRhX3R5cGVEb2N1bWVudC5pZDtcbiAgICAgIHR5cGVEb2N1bWVudE9iai5uYW1lID0gZGF0YV90eXBlRG9jdW1lbnQubmFtZTtcbiAgICAgIHR5cGVEb2N1bWVudE9iai5zdGF0ZSA9IGRhdGFfdHlwZURvY3VtZW50LnN0YXRlO1xuICAgICAgYXdhaXQgdHlwZURvY3VtZW50T2JqLnNhdmUoKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKHtcInN0YXRlXCI6IHRydWUsXCJtZXNzYWdlXCI6IFwiVGlwbyBkb2N1bWVudG8gY3JlYWRhIGV4aXRvc2FtZW50ZVwifSlcbiAgICB9Y2F0Y2goZSl7XG4gICAgICBjb25zb2xlLmxvZyhgZSAtPiAke2V9YClcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNTAwKS5qc29uKHtcInN0YXRlXCI6IGZhbHNlLCBcIm1lc3NhZ2VcIjogXCJFcnJvciBhbCBjcmVhciBlbCB0aXBvIGRlIGRvY3VtZW50b1wifSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0VHlwZURvY3VtZW50KHtyZXNwb25zZX06IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgIHRyeXtcbiAgICAgIGNvbnN0IExfdHlwZURvY3VtZW50ID0gYXdhaXQgVHlwZURvY3VtZW50LnF1ZXJ5KCkuc2VsZWN0KCdpZCcsICduYW1lJykud2hlcmUoJ3N0YXRlJyx0cnVlKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKHtcInN0YXRlXCI6IHRydWUsIFwidHlwZURvY3VtZW50c1wiOiBMX3R5cGVEb2N1bWVudH0pXG4gICAgfWNhdGNoKGUpe1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDApLmpzb24oe1wic3RhdGVcIjogZmFsc2UsIFwibWVzc2FnZVwiOiBcIkVycm9yIGFsIGxpc3RhciBsYXMgVGlwbyBkZSBkb2N1bWVudG9zXCJ9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZWxldGVUeXBlRG9jdW1lbnQoe3JlcXVlc3QscmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICBjb25zdCBpZCA9IHJlcXVlc3QucGFyYW0oJ2lkX3R5cGVEb2N1bWVudCcpXG4gICAgdHJ5e1xuICAgICAgYXdhaXQgVHlwZURvY3VtZW50LnF1ZXJ5KCkuZGVsZXRlKCkud2hlcmUoJ2lkJyxpZClcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKHtcInN0YXRlXCI6IHRydWUsIFwibWVzc2FnZVwiOiBcIlRpcG8gZGUgZG9jdW1lbnRvIGVsaW1pbmFkbyBjb24gZXhpdG9cIn0pXG4gICAgfWNhdGNoKGUpe1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg1MDApLmpzb24oe1wic3RhdGVcIjogZmFsc2UsXCJtZXNzYWdlXCI6IFwiRXJyb3IgYWwgZWxpbWluYXIgdGlwbyBkZSBkb2N1bWVudG9cIn0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZVR5cGVEb2N1bWVudCh7cmVxdWVzdCxyZXNwb25zZX06IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgIGNvbnN0IGlkX3R5cGVEb2N1bWVudD1yZXF1ZXN0LnBhcmFtKCdpZF90eXBlRG9jdW1lbnQnKTtcbiAgICBjb25zdCB7bmFtZSxzdGF0ZX0gPSByZXF1ZXN0LmFsbCgpO1xuICAgIHRyeXtcbiAgICAgIGF3YWl0IFR5cGVEb2N1bWVudC5xdWVyeSgpLndoZXJlKCdpZCcsaWRfdHlwZURvY3VtZW50KS51cGRhdGUoe1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbigge1xuICAgICAgXCJzdGF0ZVwiOiB0cnVlLCBcIm1lc3NhZ2VcIjogXCJUaXBvIGRlIGRvY3VtZW50byBFZGl0YWRhIGNvbiBleGl0b1wifSlcbiAgICB9Y2F0Y2goZSl7XG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMCkuanNvbih7XCJzdGF0ZVwiOiBmYWxzZSxcIm1lc3NhZ2VcIjogXCJFcnJvciBhbCBlZGl0YXIgbGEgVGlwbyBkZSBkb2N1bWVudG9cIn0pXG4gICAgfVxuICB9XG59XG4iXX0=
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Answer_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Answer"));
const Question_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Question"));
const QuestionsController_1 = __importDefault(require("./QuestionsController"));
class AnswersController {
    async createAnswer({ request, response }) {
        const { opcion, is_correct, state, question_id } = request.all();
        try {
            const answerObj = new Answer_1.default();
            answerObj.opcion = opcion;
            answerObj.is_correct = is_correct;
            answerObj.state = state;
            const state_question = await this.getValidarQuestion(question_id);
            if (state_question == 0) {
                return response.status(500).json({ "msg": "ERROR EN VALIDAR QUESTION" });
            }
            answerObj.question_id = question_id;
            const L_question = await Question_1.default.query().select('question', 'options').where('id', question_id);
            const options_question = L_question[0]['$attributes']['options'];
            const option = { opcion: answerObj['$attributes']['opcion'], iscorrect: answerObj['$attributes']['is_correct'] };
            options_question[options_question.length] = option;
            const question_aux = new QuestionsController_1.default();
            question_aux.updateQuestionNewAnswer(question_id, options_question);
            await answerObj.save();
            return response.status(200).json({ "state": true, "message": "Pregunta creada exitosamente" });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al crear answer" });
        }
    }
    async createAnswerQuestion(question_id, options) {
        try {
            options.map((answer) => {
                const answer_new = new Answer_1.default();
                answer_new.opcion = answer['opcion'];
                answer_new.is_correct = answer['iscorrect'];
                answer_new.question_id = question_id;
                answer_new.state = true;
                answer_new.save();
            });
        }
        catch (e) {
        }
    }
    async getValidarQuestion(question_id) {
        const total = await Question_1.default.query().where({ "id": question_id }).count('*');
        return total.length;
    }
    async updateAnswer({ request, response }) {
        const id = request.param('id_opcion');
        const { opcion, iscorrect } = request.all();
        try {
            await Answer_1.default.query().where('id', id).update({
                opcion: opcion,
                is_correct: iscorrect
            });
            const L_answer = await Answer_1.default.query().select('question_id').where('id', id);
            const question_id = L_answer[0]['$attributes']['question_id'];
            const L_answerquestions = await Answer_1.default.query().select('opcion', 'is_correct').where('question_id', question_id);
            const op_aux = Array();
            for (const i in L_answerquestions) {
                op_aux[op_aux.length] = { opcion: L_answerquestions[i]['$attributes']['opcion'], iscorrect: L_answerquestions[i]['$attributes']['is_correct'] };
            }
            const question_aux = new QuestionsController_1.default();
            question_aux.updateQuestionNewAnswer(question_id, op_aux);
            return response.status(200).json({ "state": true, "message": "opcion Editada con exito" });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al editar la opcion" });
        }
    }
    async getOptions({ request, response }) {
        const id = request.param('id_question');
        try {
            const L_answerquestions = await Answer_1.default.query().select('id', 'opcion').where('question_id', id);
            response.status(200).json({ "state": true, "message": "Listado de opciones", "options": L_answerquestions });
        }
        catch (e) {
            return response.status(500).json({ "state": false, "message": "Error al obtener listado de opciones" });
        }
    }
}
exports.default = AnswersController;
//# sourceMappingURL=data:application/json;base64,
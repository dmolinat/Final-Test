"use strict";function cov_1xxtm7aeyk(){var path="D:\\Documents\\Universidad Nacional de Colombia\\2023 - 1\\BOOTCAMP_BACKEND\\Final-Test\\config\\app.ts";var hash="5b98e00f9b48786add240eb559d10cc3e157292f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Documents\\Universidad Nacional de Colombia\\2023 - 1\\BOOTCAMP_BACKEND\\Final-Test\\config\\app.ts",statementMap:{"0":{start:{line:2,column:22},end:{line:4,column:1}},"1":{start:{line:3,column:4},end:{line:3,column:62}},"2":{start:{line:5,column:0},end:{line:5,column:62}},"3":{start:{line:6,column:0},end:{line:6,column:95}},"4":{start:{line:7,column:21},end:{line:7,column:59}},"5":{start:{line:8,column:14},end:{line:8,column:79}},"6":{start:{line:9,column:0},end:{line:9,column:46}},"7":{start:{line:10,column:0},end:{line:26,column:2}},"8":{start:{line:27,column:0},end:{line:32,column:2}},"9":{start:{line:33,column:0},end:{line:37,column:2}},"10":{start:{line:38,column:0},end:{line:38,column:23}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:2,column:56},end:{line:2,column:57}},loc:{start:{line:2,column:71},end:{line:4,column:1}},line:2}},branchMap:{"0":{loc:{start:{line:2,column:22},end:{line:4,column:1}},type:"binary-expr",locations:[{start:{line:2,column:23},end:{line:2,column:27}},{start:{line:2,column:31},end:{line:2,column:51}},{start:{line:2,column:56},end:{line:4,column:1}}],line:2},"1":{loc:{start:{line:3,column:11},end:{line:3,column:61}},type:"cond-expr",locations:[{start:{line:3,column:37},end:{line:3,column:40}},{start:{line:3,column:43},end:{line:3,column:61}}],line:3},"2":{loc:{start:{line:3,column:12},end:{line:3,column:33}},type:"binary-expr",locations:[{start:{line:3,column:12},end:{line:3,column:15}},{start:{line:3,column:19},end:{line:3,column:33}}],line:3}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{"0":0},b:{"0":[0,0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,file:"app.js",sourceRoot:"",sources:["app.ts"],names:[],mappings:";;;;;;AAOA,4DAAkC;AAClC,gFAAsC;AAmBzB,QAAA,MAAM,GAAW,aAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;AAWnC,QAAA,IAAI,GAAiB;IAYhC,mBAAmB,EAAE,KAAK;IAO1B,eAAe,EAAE,CAAC;IAWlB,iBAAiB,EAAE,KAAK;IAWxB,UAAU,EAAE,oBAAS,CAAC,OAAO,CAAC,UAAU,CAAC;IAUzC,IAAI,EAAE,KAAK;IAOX,iBAAiB,EAAE,UAAU;IAO7B,MAAM,EAAE;QACN,MAAM,EAAE,EAAE;QACV,IAAI,EAAE,GAAG;QACT,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,KAAK;QACb,QAAQ,EAAE,KAAK;KAChB;IAkBD,yBAAyB,EAAE,kBAAkB;CAC9C,CAAA;AAOY,QAAA,MAAM,GAAiB;IAalC,IAAI,EAAE,aAAG,CAAC,GAAG,CAAC,UAAU,CAAC;IAUzB,OAAO,EAAE,IAAI;IAYb,KAAK,EAAE,aAAG,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC;IAWnC,WAAW,EAAE,aAAG,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,aAAa;CACnD,CAAA;AAOY,QAAA,QAAQ,GAAmB;IAStC,OAAO,EAAE,IAAI;IAWb,SAAS,EAAE,EAAE;IAWb,SAAS,EAAE,EAAE;CACd,CAAA;AAWY,QAAA,SAAS,GAAoB,EACzC,CAAA",sourcesContent:["/**\n * Config source: https://git.io/JfefZ\n *\n * Feel free to let us know via PR, if you find something broken in this config\n * file.\n */\n\nimport proxyAddr from 'proxy-addr'\nimport Env from '@ioc:Adonis/Core/Env'\nimport type { ServerConfig } from '@ioc:Adonis/Core/Server'\nimport type { LoggerConfig } from '@ioc:Adonis/Core/Logger'\nimport type { ProfilerConfig } from '@ioc:Adonis/Core/Profiler'\nimport type { ValidatorConfig } from '@ioc:Adonis/Core/Validator'\n\n/*\n|--------------------------------------------------------------------------\n| Application secret key\n|--------------------------------------------------------------------------\n|\n| The secret to encrypt and sign different values in your application.\n| Make sure to keep the `APP_KEY` as an environment variable and secure.\n|\n| Note: Changing the application key for an existing app will make all\n| the cookies invalid and also the existing encrypted data will not\n| be decrypted.\n|\n*/\nexport const appKey: string = Env.get('APP_KEY')\n\n/*\n|--------------------------------------------------------------------------\n| Http server configuration\n|--------------------------------------------------------------------------\n|\n| The configuration for the HTTP(s) server. Make sure to go through all\n| the config properties to make keep server secure.\n|\n*/\nexport const http: ServerConfig = {\n  /*\n  |--------------------------------------------------------------------------\n  | Allow method spoofing\n  |--------------------------------------------------------------------------\n  |\n  | Method spoofing enables defining custom HTTP methods using a query string\n  | `_method`. This is usually required when you are making traditional\n  | form requests and wants to use HTTP verbs like `PUT`, `DELETE` and\n  | so on.\n  |\n  */\n  allowMethodSpoofing: false,\n\n  /*\n  |--------------------------------------------------------------------------\n  | Subdomain offset\n  |--------------------------------------------------------------------------\n  */\n  subdomainOffset: 2,\n\n  /*\n  |--------------------------------------------------------------------------\n  | Request Ids\n  |--------------------------------------------------------------------------\n  |\n  | Setting this value to `true` will generate a unique request id for each\n  | HTTP request and set it as `x-request-id` header.\n  |\n  */\n  generateRequestId: false,\n\n  /*\n  |--------------------------------------------------------------------------\n  | Trusting proxy servers\n  |--------------------------------------------------------------------------\n  |\n  | Define the proxy servers that AdonisJs must trust for reading `X-Forwarded`\n  | headers.\n  |\n  */\n  trustProxy: proxyAddr.compile('loopback'),\n\n  /*\n  |--------------------------------------------------------------------------\n  | Generating Etag\n  |--------------------------------------------------------------------------\n  |\n  | Whether or not to generate an etag for every response.\n  |\n  */\n  etag: false,\n\n  /*\n  |--------------------------------------------------------------------------\n  | JSONP Callback\n  |--------------------------------------------------------------------------\n  */\n  jsonpCallbackName: 'callback',\n\n  /*\n  |--------------------------------------------------------------------------\n  | Cookie settings\n  |--------------------------------------------------------------------------\n  */\n  cookie: {\n    domain: '',\n    path: '/',\n    maxAge: '2h',\n    httpOnly: true,\n    secure: false,\n    sameSite: false,\n  },\n\n  /*\n  |--------------------------------------------------------------------------\n  | Force Content Negotiation\n  |--------------------------------------------------------------------------\n  |\n  | The internals of the framework relies on the content negotiation to\n  | detect the best possible response type for a given HTTP request.\n  |\n  | However, it is a very common these days that API servers always wants to\n  | make response in JSON regardless of the existence of the `Accept` header.\n  |\n  | By setting `forceContentNegotiationTo = 'application/json'`, you negotiate\n  | with the server in advance to always return JSON without relying on the\n  | client to set the header explicitly.\n  |\n  */\n  forceContentNegotiationTo: 'application/json',\n}\n\n/*\n|--------------------------------------------------------------------------\n| Logger\n|--------------------------------------------------------------------------\n*/\nexport const logger: LoggerConfig = {\n  /*\n  |--------------------------------------------------------------------------\n  | Application name\n  |--------------------------------------------------------------------------\n  |\n  | The name of the application you want to add to the log. It is recommended\n  | to always have app name in every log line.\n  |\n  | The `APP_NAME` environment variable is automatically set by AdonisJS by\n  | reading the `name` property from the `package.json` file.\n  |\n  */\n  name: Env.get('APP_NAME'),\n\n  /*\n  |--------------------------------------------------------------------------\n  | Toggle logger\n  |--------------------------------------------------------------------------\n  |\n  | Enable or disable logger application wide\n  |\n  */\n  enabled: true,\n\n  /*\n  |--------------------------------------------------------------------------\n  | Logging level\n  |--------------------------------------------------------------------------\n  |\n  | The level from which you want the logger to flush logs. It is recommended\n  | to make use of the environment variable, so that you can define log levels\n  | at deployment level and not code level.\n  |\n  */\n  level: Env.get('LOG_LEVEL', 'info'),\n\n  /*\n  |--------------------------------------------------------------------------\n  | Pretty print\n  |--------------------------------------------------------------------------\n  |\n  | It is highly advised NOT to use `prettyPrint` in production, since it\n  | can have huge impact on performance.\n  |\n  */\n  prettyPrint: Env.get('NODE_ENV') === 'development',\n}\n\n/*\n|--------------------------------------------------------------------------\n| Profiler\n|--------------------------------------------------------------------------\n*/\nexport const profiler: ProfilerConfig = {\n  /*\n  |--------------------------------------------------------------------------\n  | Toggle profiler\n  |--------------------------------------------------------------------------\n  |\n  | Enable or disable profiler\n  |\n  */\n  enabled: true,\n\n  /*\n  |--------------------------------------------------------------------------\n  | Blacklist actions/row labels\n  |--------------------------------------------------------------------------\n  |\n  | Define an array of actions or row labels that you want to disable from\n  | getting profiled.\n  |\n  */\n  blacklist: [],\n\n  /*\n  |--------------------------------------------------------------------------\n  | Whitelist actions/row labels\n  |--------------------------------------------------------------------------\n  |\n  | Define an array of actions or row labels that you want to whitelist for\n  | the profiler. When whitelist is defined, then `blacklist` is ignored.\n  |\n  */\n  whitelist: [],\n}\n\n/*\n|--------------------------------------------------------------------------\n| Validator\n|--------------------------------------------------------------------------\n|\n| Configure the global configuration for the validator. Here's the reference\n| to the default config https://git.io/JT0WE\n|\n*/\nexport const validator: ValidatorConfig = {\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5b98e00f9b48786add240eb559d10cc3e157292f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1xxtm7aeyk=function(){return actualCoverage;};}return actualCoverage;}cov_1xxtm7aeyk();var __importDefault=(cov_1xxtm7aeyk().s[0]++,(cov_1xxtm7aeyk().b[0][0]++,this)&&(cov_1xxtm7aeyk().b[0][1]++,this.__importDefault)||(cov_1xxtm7aeyk().b[0][2]++,function(mod){cov_1xxtm7aeyk().f[0]++;cov_1xxtm7aeyk().s[1]++;return(cov_1xxtm7aeyk().b[2][0]++,mod)&&(cov_1xxtm7aeyk().b[2][1]++,mod.__esModule)?(cov_1xxtm7aeyk().b[1][0]++,mod):(cov_1xxtm7aeyk().b[1][1]++,{"default":mod});}));cov_1xxtm7aeyk().s[2]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1xxtm7aeyk().s[3]++;exports.validator=exports.profiler=exports.logger=exports.http=exports.appKey=void 0;const proxy_addr_1=(cov_1xxtm7aeyk().s[4]++,__importDefault(require("proxy-addr")));const Env_1=(cov_1xxtm7aeyk().s[5]++,__importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Env")));cov_1xxtm7aeyk().s[6]++;exports.appKey=Env_1.default.get('APP_KEY');cov_1xxtm7aeyk().s[7]++;exports.http={allowMethodSpoofing:false,subdomainOffset:2,generateRequestId:false,trustProxy:proxy_addr_1.default.compile('loopback'),etag:false,jsonpCallbackName:'callback',cookie:{domain:'',path:'/',maxAge:'2h',httpOnly:true,secure:false,sameSite:false},forceContentNegotiationTo:'application/json'};cov_1xxtm7aeyk().s[8]++;exports.logger={name:Env_1.default.get('APP_NAME'),enabled:true,level:Env_1.default.get('LOG_LEVEL','info'),prettyPrint:Env_1.default.get('NODE_ENV')==='development'};cov_1xxtm7aeyk().s[9]++;exports.profiler={enabled:true,blacklist:[],whitelist:[]};cov_1xxtm7aeyk().s[10]++;exports.validator={};//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
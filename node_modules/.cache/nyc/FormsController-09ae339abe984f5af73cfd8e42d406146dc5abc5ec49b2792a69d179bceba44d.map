{"version":3,"file":"FormsController.js","sourceRoot":"","sources":["FormsController.ts"],"names":[],"mappings":";;;;;AACA,iFAAmC;AACnC,yFAA0C;AAE1C,MAAqB,eAAe;IAC3B,KAAK,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAsB;QACvD,IAAG;YACD,MAAM,WAAW,GAAG,MAAM,kBAAQ,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,UAAU,EAAC,IAAI,EAAC,SAAS,CAAC,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAA;YACjG,MAAM,YAAY,GAAC,KAAK,EAAE,CAAC;YAC3B,KAAI,MAAM,CAAC,IAAI,WAAW,EAAC;gBACzB,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG;oBAClC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,UAAU,CAAC;oBACnD,EAAE,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC;oBACvC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC;iBAAC,CAAA;aACrD;YACD,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAC,CAAC,CAAA;SAClE;QAAA,OAAM,CAAC,EAAC;YACP,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,6BAA6B,EAAC,CAAC,CAAA;SACtF;IACH,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,EAAC,OAAO,EAAC,QAAQ,EAAsB;QAChE,IAAG;YACD,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE,CAAA;YAC7B,KAAI,MAAM,CAAC,IAAI,SAAS,CAAC,OAAO,EAAC;gBAC/B,MAAM,cAAI,CAAC,MAAM,CAAC;oBAChB,UAAU,EAAE,SAAS,CAAC,YAAY;oBAClC,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC/B,KAAK,EAAE,IAAI;iBACZ,CAAC,CAAA;aACL;YACD,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,SAAS,EAAE,kCAAkC,EAAC,CAAC,CAAA;SACzF;QAAA,OAAM,CAAC,EAAC;YACP,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,yCAAyC,EAAC,CAAC,CAAA;SAClG;IACH,CAAC;CACF;AAhCD,kCAgCC","sourcesContent":["import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\nimport Form from 'App/Models/Form';\nimport Question from 'App/Models/Question'\n\nexport default class FormsController {\n  public async getQuestions({response}: HttpContextContract){\n    try{\n      const L_questions = await Question.query().select('question','id','options').where({state: true})\n      const question_aux=Array();\n      for(const i in L_questions){\n        question_aux[question_aux.length] = {\n          question: L_questions[i]['$attributes']['question'],\n          id: L_questions[i]['$attributes']['id'],\n          options: L_questions[i]['$attributes']['options']}\n      }\n      response.status(200).json({state: true, questions: question_aux})\n    }catch(e){\n      response.status(500).json({\"state\": false, \"message\": \"Error al obtener el listado\"})\n    }\n  }\n\n  public async postQuestions({request,response}: HttpContextContract){\n    try{\n      const form_data = request.all()\n        for(const i in form_data.answers){\n          await Form.create({\n            student_id: form_data.estudianteId,\n            answer_id: form_data.answers[i],\n            state: true\n          })\n      }\n      response.status(200).json({\"state\": true,\"message\": \"Respuestas almacenadas con exito\"})\n    }catch(e){\n      response.status(500).json({\"state\": false, \"message\": \"No se pudieron almacenar las respuestas\"})\n    }\n  }\n}\n"]}
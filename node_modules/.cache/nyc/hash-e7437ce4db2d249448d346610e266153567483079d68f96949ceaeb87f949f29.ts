"use strict";function cov_1xkcwfp4yi(){var path="D:\\Documents\\Universidad Nacional de Colombia\\2023 - 1\\BOOTCAMP_BACKEND\\Final-Test\\config\\hash.ts";var hash="57b1ebc6aa65c82d0a35f3e4db0a67f3689055a0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Documents\\Universidad Nacional de Colombia\\2023 - 1\\BOOTCAMP_BACKEND\\Final-Test\\config\\hash.ts",statementMap:{"0":{start:{line:2,column:22},end:{line:4,column:1}},"1":{start:{line:3,column:4},end:{line:3,column:62}},"2":{start:{line:5,column:0},end:{line:5,column:62}},"3":{start:{line:6,column:14},end:{line:6,column:79}},"4":{start:{line:7,column:17},end:{line:7,column:55}},"5":{start:{line:8,column:0},end:{line:33,column:3}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:2,column:56},end:{line:2,column:57}},loc:{start:{line:2,column:71},end:{line:4,column:1}},line:2}},branchMap:{"0":{loc:{start:{line:2,column:22},end:{line:4,column:1}},type:"binary-expr",locations:[{start:{line:2,column:23},end:{line:2,column:27}},{start:{line:2,column:31},end:{line:2,column:51}},{start:{line:2,column:56},end:{line:4,column:1}}],line:2},"1":{loc:{start:{line:3,column:11},end:{line:3,column:61}},type:"cond-expr",locations:[{start:{line:3,column:37},end:{line:3,column:40}},{start:{line:3,column:43},end:{line:3,column:61}}],line:3},"2":{loc:{start:{line:3,column:12},end:{line:3,column:33}},type:"binary-expr",locations:[{start:{line:3,column:12},end:{line:3,column:15}},{start:{line:3,column:19},end:{line:3,column:33}}],line:3}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,file:"hash.js",sourceRoot:"",sources:["hash.ts"],names:[],mappings:";;;;;AAOA,gFAAsC;AACtC,wDAAwD;AAWxD,kBAAe,IAAA,mBAAU,EAAC;IAUxB,OAAO,EAAE,aAAG,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC;IAEzC,IAAI,EAAE;QAcJ,MAAM,EAAE;YACN,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,KAAK;YACX,SAAS,EAAE,CAAC;YACZ,eAAe,EAAE,CAAC;YAClB,QAAQ,EAAE,EAAE;YACZ,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;SAC5B;QAeD,KAAK,EAAE;YACL,MAAM,EAAE,QAAQ;YAChB,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,CAAC;YACb,MAAM,EAAE,IAAI;YACZ,WAAW,EAAE,CAAC;YACd,QAAQ,EAAE,EAAE;SACb;QAeD,MAAM,EAAE;YACN,MAAM,EAAE,QAAQ;YAChB,MAAM,EAAE,EAAE;SACX;KACF;CACF,CAAC,CAAA",sourcesContent:["/**\n * Config source: https://git.io/JfefW\n *\n * Feel free to let us know via PR, if you find something broken in this config\n * file.\n */\n\nimport Env from '@ioc:Adonis/Core/Env'\nimport { hashConfig } from '@adonisjs/core/build/config'\n\n/*\n|--------------------------------------------------------------------------\n| Hash Config\n|--------------------------------------------------------------------------\n|\n| The `HashConfig` relies on the `HashList` interface which is\n| defined inside `contracts` directory.\n|\n*/\nexport default hashConfig({\n  /*\n  |--------------------------------------------------------------------------\n  | Default hasher\n  |--------------------------------------------------------------------------\n  |\n  | By default we make use of the argon hasher to hash values. However, feel\n  | free to change the default value\n  |\n  */\n  default: Env.get('HASH_DRIVER', 'scrypt'),\n\n  list: {\n    /*\n    |--------------------------------------------------------------------------\n    | scrypt\n    |--------------------------------------------------------------------------\n    |\n    | Scrypt mapping uses the Node.js inbuilt crypto module for creating\n    | hashes.\n    |\n    | We are using the default configuration recommended within the Node.js\n    | documentation.\n    | https://nodejs.org/api/crypto.html#cryptoscryptpassword-salt-keylen-options-callback\n    |\n    */\n    scrypt: {\n      driver: 'scrypt',\n      cost: 16384,\n      blockSize: 8,\n      parallelization: 1,\n      saltSize: 16,\n      keyLength: 64,\n      maxMemory: 32 * 1024 * 1024,\n    },\n\n    /*\n    |--------------------------------------------------------------------------\n    | Argon\n    |--------------------------------------------------------------------------\n    |\n    | Argon mapping uses the `argon2` driver to hash values.\n    |\n    | Make sure you install the underlying dependency for this driver to work.\n    | https://www.npmjs.com/package/phc-argon2.\n    |\n    | npm install phc-argon2\n    |\n    */\n    argon: {\n      driver: 'argon2',\n      variant: 'id',\n      iterations: 3,\n      memory: 4096,\n      parallelism: 1,\n      saltSize: 16,\n    },\n\n    /*\n    |--------------------------------------------------------------------------\n    | Bcrypt\n    |--------------------------------------------------------------------------\n    |\n    | Bcrypt mapping uses the `bcrypt` driver to hash values.\n    |\n    | Make sure you install the underlying dependency for this driver to work.\n    | https://www.npmjs.com/package/phc-bcrypt.\n    |\n    | npm install phc-bcrypt\n    |\n    */\n    bcrypt: {\n      driver: 'bcrypt',\n      rounds: 10,\n    },\n  },\n})\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"57b1ebc6aa65c82d0a35f3e4db0a67f3689055a0"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1xkcwfp4yi=function(){return actualCoverage;};}return actualCoverage;}cov_1xkcwfp4yi();var __importDefault=(cov_1xkcwfp4yi().s[0]++,(cov_1xkcwfp4yi().b[0][0]++,this)&&(cov_1xkcwfp4yi().b[0][1]++,this.__importDefault)||(cov_1xkcwfp4yi().b[0][2]++,function(mod){cov_1xkcwfp4yi().f[0]++;cov_1xkcwfp4yi().s[1]++;return(cov_1xkcwfp4yi().b[2][0]++,mod)&&(cov_1xkcwfp4yi().b[2][1]++,mod.__esModule)?(cov_1xkcwfp4yi().b[1][0]++,mod):(cov_1xkcwfp4yi().b[1][1]++,{"default":mod});}));cov_1xkcwfp4yi().s[2]++;Object.defineProperty(exports,"__esModule",{value:true});const Env_1=(cov_1xkcwfp4yi().s[3]++,__importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Env")));const config_1=(cov_1xkcwfp4yi().s[4]++,require("@adonisjs/core/build/config"));cov_1xkcwfp4yi().s[5]++;exports.default=(0,config_1.hashConfig)({default:Env_1.default.get('HASH_DRIVER','scrypt'),list:{scrypt:{driver:'scrypt',cost:16384,blockSize:8,parallelization:1,saltSize:16,keyLength:64,maxMemory:32*1024*1024},argon:{driver:'argon2',variant:'id',iterations:3,memory:4096,parallelism:1,saltSize:16},bcrypt:{driver:'bcrypt',rounds:10}}});//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhhc2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFPQSxnRkFBc0M7QUFDdEMsd0RBQXdEO0FBV3hELGtCQUFlLElBQUEsbUJBQVUsRUFBQztJQVV4QixPQUFPLEVBQUUsYUFBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDO0lBRXpDLElBQUksRUFBRTtRQWNKLE1BQU0sRUFBRTtZQUNOLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLElBQUksRUFBRSxLQUFLO1lBQ1gsU0FBUyxFQUFFLENBQUM7WUFDWixlQUFlLEVBQUUsQ0FBQztZQUNsQixRQUFRLEVBQUUsRUFBRTtZQUNaLFNBQVMsRUFBRSxFQUFFO1lBQ2IsU0FBUyxFQUFFLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSTtTQUM1QjtRQWVELEtBQUssRUFBRTtZQUNMLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLE9BQU8sRUFBRSxJQUFJO1lBQ2IsVUFBVSxFQUFFLENBQUM7WUFDYixNQUFNLEVBQUUsSUFBSTtZQUNaLFdBQVcsRUFBRSxDQUFDO1lBQ2QsUUFBUSxFQUFFLEVBQUU7U0FDYjtRQWVELE1BQU0sRUFBRTtZQUNOLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLE1BQU0sRUFBRSxFQUFFO1NBQ1g7S0FDRjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29uZmlnIHNvdXJjZTogaHR0cHM6Ly9naXQuaW8vSmZlZldcbiAqXG4gKiBGZWVsIGZyZWUgdG8gbGV0IHVzIGtub3cgdmlhIFBSLCBpZiB5b3UgZmluZCBzb21ldGhpbmcgYnJva2VuIGluIHRoaXMgY29uZmlnXG4gKiBmaWxlLlxuICovXG5cbmltcG9ydCBFbnYgZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9FbnYnXG5pbXBvcnQgeyBoYXNoQ29uZmlnIH0gZnJvbSAnQGFkb25pc2pzL2NvcmUvYnVpbGQvY29uZmlnJ1xuXG4vKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IEhhc2ggQ29uZmlnXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnxcbnwgVGhlIGBIYXNoQ29uZmlnYCByZWxpZXMgb24gdGhlIGBIYXNoTGlzdGAgaW50ZXJmYWNlIHdoaWNoIGlzXG58IGRlZmluZWQgaW5zaWRlIGBjb250cmFjdHNgIGRpcmVjdG9yeS5cbnxcbiovXG5leHBvcnQgZGVmYXVsdCBoYXNoQ29uZmlnKHtcbiAgLypcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHwgRGVmYXVsdCBoYXNoZXJcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHxcbiAgfCBCeSBkZWZhdWx0IHdlIG1ha2UgdXNlIG9mIHRoZSBhcmdvbiBoYXNoZXIgdG8gaGFzaCB2YWx1ZXMuIEhvd2V2ZXIsIGZlZWxcbiAgfCBmcmVlIHRvIGNoYW5nZSB0aGUgZGVmYXVsdCB2YWx1ZVxuICB8XG4gICovXG4gIGRlZmF1bHQ6IEVudi5nZXQoJ0hBU0hfRFJJVkVSJywgJ3NjcnlwdCcpLFxuXG4gIGxpc3Q6IHtcbiAgICAvKlxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHwgc2NyeXB0XG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgfFxuICAgIHwgU2NyeXB0IG1hcHBpbmcgdXNlcyB0aGUgTm9kZS5qcyBpbmJ1aWx0IGNyeXB0byBtb2R1bGUgZm9yIGNyZWF0aW5nXG4gICAgfCBoYXNoZXMuXG4gICAgfFxuICAgIHwgV2UgYXJlIHVzaW5nIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gcmVjb21tZW5kZWQgd2l0aGluIHRoZSBOb2RlLmpzXG4gICAgfCBkb2N1bWVudGF0aW9uLlxuICAgIHwgaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9jcnlwdG8uaHRtbCNjcnlwdG9zY3J5cHRwYXNzd29yZC1zYWx0LWtleWxlbi1vcHRpb25zLWNhbGxiYWNrXG4gICAgfFxuICAgICovXG4gICAgc2NyeXB0OiB7XG4gICAgICBkcml2ZXI6ICdzY3J5cHQnLFxuICAgICAgY29zdDogMTYzODQsXG4gICAgICBibG9ja1NpemU6IDgsXG4gICAgICBwYXJhbGxlbGl6YXRpb246IDEsXG4gICAgICBzYWx0U2l6ZTogMTYsXG4gICAgICBrZXlMZW5ndGg6IDY0LFxuICAgICAgbWF4TWVtb3J5OiAzMiAqIDEwMjQgKiAxMDI0LFxuICAgIH0sXG5cbiAgICAvKlxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHwgQXJnb25cbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB8XG4gICAgfCBBcmdvbiBtYXBwaW5nIHVzZXMgdGhlIGBhcmdvbjJgIGRyaXZlciB0byBoYXNoIHZhbHVlcy5cbiAgICB8XG4gICAgfCBNYWtlIHN1cmUgeW91IGluc3RhbGwgdGhlIHVuZGVybHlpbmcgZGVwZW5kZW5jeSBmb3IgdGhpcyBkcml2ZXIgdG8gd29yay5cbiAgICB8IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3BoYy1hcmdvbjIuXG4gICAgfFxuICAgIHwgbnBtIGluc3RhbGwgcGhjLWFyZ29uMlxuICAgIHxcbiAgICAqL1xuICAgIGFyZ29uOiB7XG4gICAgICBkcml2ZXI6ICdhcmdvbjInLFxuICAgICAgdmFyaWFudDogJ2lkJyxcbiAgICAgIGl0ZXJhdGlvbnM6IDMsXG4gICAgICBtZW1vcnk6IDQwOTYsXG4gICAgICBwYXJhbGxlbGlzbTogMSxcbiAgICAgIHNhbHRTaXplOiAxNixcbiAgICB9LFxuXG4gICAgLypcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB8IEJjcnlwdFxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHxcbiAgICB8IEJjcnlwdCBtYXBwaW5nIHVzZXMgdGhlIGBiY3J5cHRgIGRyaXZlciB0byBoYXNoIHZhbHVlcy5cbiAgICB8XG4gICAgfCBNYWtlIHN1cmUgeW91IGluc3RhbGwgdGhlIHVuZGVybHlpbmcgZGVwZW5kZW5jeSBmb3IgdGhpcyBkcml2ZXIgdG8gd29yay5cbiAgICB8IGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3BoYy1iY3J5cHQuXG4gICAgfFxuICAgIHwgbnBtIGluc3RhbGwgcGhjLWJjcnlwdFxuICAgIHxcbiAgICAqL1xuICAgIGJjcnlwdDoge1xuICAgICAgZHJpdmVyOiAnYmNyeXB0JyxcbiAgICAgIHJvdW5kczogMTAsXG4gICAgfSxcbiAgfSxcbn0pXG4iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXhrY3dmcDR5aSIsImFjdHVhbENvdmVyYWdlIiwiRW52XzEiLCJzIiwiX19pbXBvcnREZWZhdWx0IiwiZ2xvYmFsIiwiU3ltYm9sIiwiZm9yIiwiY29uZmlnXzEiLCJyZXF1aXJlIiwiZXhwb3J0cyIsImRlZmF1bHQiLCJoYXNoQ29uZmlnIiwiZ2V0IiwibGlzdCIsInNjcnlwdCIsImRyaXZlciIsImNvc3QiLCJibG9ja1NpemUiLCJwYXJhbGxlbGl6YXRpb24iLCJzYWx0U2l6ZSIsImtleUxlbmd0aCIsIm1heE1lbW9yeSIsImFyZ29uIiwidmFyaWFudCIsIml0ZXJhdGlvbnMiLCJtZW1vcnkiLCJwYXJhbGxlbGlzbSIsImJjcnlwdCIsInJvdW5kcyJdLCJzb3VyY2VzIjpbImhhc2gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25maWcgc291cmNlOiBodHRwczovL2dpdC5pby9KZmVmV1xuICpcbiAqIEZlZWwgZnJlZSB0byBsZXQgdXMga25vdyB2aWEgUFIsIGlmIHlvdSBmaW5kIHNvbWV0aGluZyBicm9rZW4gaW4gdGhpcyBjb25maWdcbiAqIGZpbGUuXG4gKi9cblxuaW1wb3J0IEVudiBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0VudidcbmltcG9ydCB7IGhhc2hDb25maWcgfSBmcm9tICdAYWRvbmlzanMvY29yZS9idWlsZC9jb25maWcnXG5cbi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgSGFzaCBDb25maWdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufFxufCBUaGUgYEhhc2hDb25maWdgIHJlbGllcyBvbiB0aGUgYEhhc2hMaXN0YCBpbnRlcmZhY2Ugd2hpY2ggaXNcbnwgZGVmaW5lZCBpbnNpZGUgYGNvbnRyYWN0c2AgZGlyZWN0b3J5LlxufFxuKi9cbmV4cG9ydCBkZWZhdWx0IGhhc2hDb25maWcoe1xuICAvKlxuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfCBEZWZhdWx0IGhhc2hlclxuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfFxuICB8IEJ5IGRlZmF1bHQgd2UgbWFrZSB1c2Ugb2YgdGhlIGFyZ29uIGhhc2hlciB0byBoYXNoIHZhbHVlcy4gSG93ZXZlciwgZmVlbFxuICB8IGZyZWUgdG8gY2hhbmdlIHRoZSBkZWZhdWx0IHZhbHVlXG4gIHxcbiAgKi9cbiAgZGVmYXVsdDogRW52LmdldCgnSEFTSF9EUklWRVInLCAnc2NyeXB0JyksXG5cbiAgbGlzdDoge1xuICAgIC8qXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgfCBzY3J5cHRcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB8XG4gICAgfCBTY3J5cHQgbWFwcGluZyB1c2VzIHRoZSBOb2RlLmpzIGluYnVpbHQgY3J5cHRvIG1vZHVsZSBmb3IgY3JlYXRpbmdcbiAgICB8IGhhc2hlcy5cbiAgICB8XG4gICAgfCBXZSBhcmUgdXNpbmcgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiByZWNvbW1lbmRlZCB3aXRoaW4gdGhlIE5vZGUuanNcbiAgICB8IGRvY3VtZW50YXRpb24uXG4gICAgfCBodHRwczovL25vZGVqcy5vcmcvYXBpL2NyeXB0by5odG1sI2NyeXB0b3NjcnlwdHBhc3N3b3JkLXNhbHQta2V5bGVuLW9wdGlvbnMtY2FsbGJhY2tcbiAgICB8XG4gICAgKi9cbiAgICBzY3J5cHQ6IHtcbiAgICAgIGRyaXZlcjogJ3NjcnlwdCcsXG4gICAgICBjb3N0OiAxNjM4NCxcbiAgICAgIGJsb2NrU2l6ZTogOCxcbiAgICAgIHBhcmFsbGVsaXphdGlvbjogMSxcbiAgICAgIHNhbHRTaXplOiAxNixcbiAgICAgIGtleUxlbmd0aDogNjQsXG4gICAgICBtYXhNZW1vcnk6IDMyICogMTAyNCAqIDEwMjQsXG4gICAgfSxcblxuICAgIC8qXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgfCBBcmdvblxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHxcbiAgICB8IEFyZ29uIG1hcHBpbmcgdXNlcyB0aGUgYGFyZ29uMmAgZHJpdmVyIHRvIGhhc2ggdmFsdWVzLlxuICAgIHxcbiAgICB8IE1ha2Ugc3VyZSB5b3UgaW5zdGFsbCB0aGUgdW5kZXJseWluZyBkZXBlbmRlbmN5IGZvciB0aGlzIGRyaXZlciB0byB3b3JrLlxuICAgIHwgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGhjLWFyZ29uMi5cbiAgICB8XG4gICAgfCBucG0gaW5zdGFsbCBwaGMtYXJnb24yXG4gICAgfFxuICAgICovXG4gICAgYXJnb246IHtcbiAgICAgIGRyaXZlcjogJ2FyZ29uMicsXG4gICAgICB2YXJpYW50OiAnaWQnLFxuICAgICAgaXRlcmF0aW9uczogMyxcbiAgICAgIG1lbW9yeTogNDA5NixcbiAgICAgIHBhcmFsbGVsaXNtOiAxLFxuICAgICAgc2FsdFNpemU6IDE2LFxuICAgIH0sXG5cbiAgICAvKlxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHwgQmNyeXB0XG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgfFxuICAgIHwgQmNyeXB0IG1hcHBpbmcgdXNlcyB0aGUgYGJjcnlwdGAgZHJpdmVyIHRvIGhhc2ggdmFsdWVzLlxuICAgIHxcbiAgICB8IE1ha2Ugc3VyZSB5b3UgaW5zdGFsbCB0aGUgdW5kZXJseWluZyBkZXBlbmRlbmN5IGZvciB0aGlzIGRyaXZlciB0byB3b3JrLlxuICAgIHwgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGhjLWJjcnlwdC5cbiAgICB8XG4gICAgfCBucG0gaW5zdGFsbCBwaGMtYmNyeXB0XG4gICAgfFxuICAgICovXG4gICAgYmNyeXB0OiB7XG4gICAgICBkcml2ZXI6ICdiY3J5cHQnLFxuICAgICAgcm91bmRzOiAxMCxcbiAgICB9LFxuICB9LFxufSlcbiJdLCJtYXBwaW5ncyI6Im9xS0FrRE07QUFBQUEsY0FBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxjQUFBLEcsb2RBM0NOLE1BQUFFLEtBQUEsRUFBQUYsY0FBQSxHQUFBRyxDQUFBLE1BQUFDLGVBQUEsQ0FBQUMsTUFBQSxDQUFBQyxNQUFBLENBQUFDLEdBQUEsa0NBQ0EsTUFBQUMsUUFBQSxFQUFBUixjQUFBLEdBQUFHLENBQUEsTUFBQU0sT0FBQSxpQ0FBd0RULGNBQUEsR0FBQUcsQ0FBQSxNQVd4RE8sT0FBQSxDQUFBQyxPQUFBLENBQWUsR0FBQUgsUUFBQSxDQUFBSSxVQUFVLEVBQUMsQ0FVeEJELE9BQU8sQ0FBRVQsS0FBQSxDQUFBUyxPQUFHLENBQUNFLEdBQUcsQ0FBQyxhQUFhLENBQUUsUUFBUSxDQUFDLENBRXpDQyxJQUFJLENBQUUsQ0FjSkMsTUFBTSxDQUFFLENBQ05DLE1BQU0sQ0FBRSxRQUFRLENBQ2hCQyxJQUFJLENBQUUsS0FBSyxDQUNYQyxTQUFTLENBQUUsQ0FBQyxDQUNaQyxlQUFlLENBQUUsQ0FBQyxDQUNsQkMsUUFBUSxDQUFFLEVBQUUsQ0FDWkMsU0FBUyxDQUFFLEVBQUUsQ0FDYkMsU0FBUyxDQUFFLEVBQUUsQ0FBRyxJQUFJLENBQUcsSSxDQUN4QixDQWVEQyxLQUFLLENBQUUsQ0FDTFAsTUFBTSxDQUFFLFFBQVEsQ0FDaEJRLE9BQU8sQ0FBRSxJQUFJLENBQ2JDLFVBQVUsQ0FBRSxDQUFDLENBQ2JDLE1BQU0sQ0FBRSxJQUFJLENBQ1pDLFdBQVcsQ0FBRSxDQUFDLENBQ2RQLFFBQVEsQ0FBRSxFLENBQ1gsQ0FlRFEsTUFBTSxDQUFFLENBQ05aLE1BQU0sQ0FBRSxRQUFRLENBQ2hCYSxNQUFNLENBQUUsRSxHQUdiLENBQUMsQyJ9
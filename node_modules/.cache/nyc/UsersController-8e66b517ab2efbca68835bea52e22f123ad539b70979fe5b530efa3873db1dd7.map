{"version":3,"file":"UsersController.js","sourceRoot":"","sources":["UsersController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\nimport User from 'App/Models/User';\nconst bcryptjs = require('bcryptjs')\nimport Env from '@ioc:Adonis/Core/Env'\nimport jwt from 'jsonwebtoken'\nimport roles from 'App/Models/Rol';\n\nexport default class UsersContUserler {\n  public async login({ request, response }: HttpContextContract) {\n    const email = request.input('email')\n    const password = request.input('password')\n    try {\n      //consultar si existe usuario con ese correo\n      const user = await User.findBy('email',email)\n      if (!user) {\n        return response.status(400).json({state: false, message: \"email invalido.\" })\n      }\n\n      const validPassword = bcryptjs.compareSync(password, user.password)\n      if (!validPassword) {\n        return response.status(400).json({ msj: 'Los datos de acceso no son correctos' })\n      }\n\n      const payload ={\n        nombres: user.first_name,\n        id: user.id,\n        cedula: user.document_number,\n      }\n      const token = await this.generarToken(payload)\n\n      //Extraer el nombre del rol\n      const user_rol = await roles.findBy('id',user.rol_id)\n      if(!user_rol){\n        return response.status(400).json({message: \"ROL NOT FOUND\"})\n      }\n\n      console.log(`token for test -> ${token}`)\n      response.status(200).json({\n        state: user.state,\n        id: user.id,\n        name: (user.first_name).concat(\" \",user.second_name,\" \",user.surname,\" \",user.second_sur_name),\n        role: user_rol.name,\n        msg: \"Ingreso exitoso\",\n      })\n    } catch (error) {\n      response.json({state: false, message: \"password or email invalid.\"})\n    }\n  }\n\n  private async generarToken(payload: any){\n    const opciones = {expiresIn: \"30 mins\"}\n    return jwt.sign(payload, Env.get('JWT_SECRET_KEY'), opciones)\n  }\n\n  public async verificarToken(authorizationHeader: string){\n    let token = authorizationHeader.split(' ')[1]\n    token=jwt.verify(token,Env.get('JWT_SECRET_KEY'), (e) =>{\n      if(e){\n        console.log(`e token expirado -> ${e}`)\n        throw new Error('Token expirado');\n      }\n    })\n    return true\n\n  }\n\n  public async createUser({request, response}: HttpContextContract){\n    try{\n      const data_User = request.all();\n      const UserObj = new User();\n      UserObj.first_name = data_User.firstName\n      UserObj.second_name = data_User.secondName\n      UserObj.surname = data_User.surname\n      UserObj.second_sur_name = data_User.secondSurName\n      UserObj.type_document = data_User.typeDocument\n      UserObj.document_number = data_User.documentNumber\n      UserObj.email = data_User.email\n\n      //Se encripta la contrasena con bcryptjs\n      const salt = bcryptjs.genSaltSync();\n      UserObj.password =  bcryptjs.hashSync(data_User.password,salt)\n\n      //No hay criterio para el rol, sera aleatorio, entre 1: admin o 2: estudiante\n      UserObj.rol_id = (Math.floor(Math.random()*2)+1)      //randint(1,2)\n      UserObj.phone = data_User.phone\n      UserObj.state = true      //Por default los usuarios creados estan habilitados para usarse\n\n      await UserObj.save();\n      return response.status(200).json({\"state\": true,\"message\": \"Estudiante creado exitosamente\"})\n    }catch(e){\n      console.log(`e -> ${e}`)\n      return response.status(500).json({\"state\": false, \"message\": \"Fallo en la creaciÃ³n del estudiante\"})\n    }\n  }\n\n  public async getUsers({response}: HttpContextContract){\n    try{\n      const L_User = await User.query().select('first_name','second_name','surname','second_sur_name','type_document','document_number','email','phone').where({});\n      return response.status(200).json({\"state\": true,\"message\": \"Listado de estudiantes\", \"users\": L_User})\n    }catch(e){\n      console.log(`e-> ${e}`)\n      return response.status(500).json({\"state\": false, \"message\": \"Fallo en el listado de estudiantes\"})\n    }\n  }\n\n  public async updateUser({request,response}: HttpContextContract){\n    const id_User=request.param('id_user');\n    const data_User = request.all();\n    try{\n      await User.query().where('id',id_User).update({\n        first_name: data_User.firstName,\n        second_name: data_User.secondName,\n        surname: data_User.surname,\n        second_sur_name: data_User.secondSurName,\n        type_document: data_User.typeDocument,\n        document_number: data_User.documentNumber,\n        email: data_User.email,\n        password: data_User.password,\n        rol_id: data_User.rolId,\n        phone: data_User.phone,\n        state: data_User.state\n    });\n    return response.status(200).json( {\n      \"state\": true, \"message\": \"Se actualizo correctamente\"})\n    }catch(e){\n      return response.status(500).json({\"state\": false,\"message\": \"Error al actualizar\"})\n    }\n  }\n\n  public async getUser({request,response}: HttpContextContract){\n    const id = request.param('id_user')\n    try{\n      const user = await User.query().select('first_name','second_name','surname','second_sur_name','type_document','document_number','email','phone').where('id',id)\n      return response.status(200).json(user)\n    }catch(e){\n      return response.status(500).json({\"state\": false,\"message\": \"Error al consultar el detalle del usuario\"})\n    }\n  }\n\n\n  public getPayload(authorizationHeader:string) {\n    let token = authorizationHeader.split(' ')[1]\n    const payload = jwt.verify(token, Env.get(\"JWT_SECRET_KEY\"), {complete: true}).payload\n    return payload\n  }\n\n\n}\n"]}
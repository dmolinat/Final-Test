"use strict";function cov_2oreg9t01w(){var path="D:\\Documents\\Universidad Nacional de Colombia\\2023 - 1\\BOOTCAMP_BACKEND\\Final-Test\\config\\cors.ts";var hash="c1be2cdb9f86e4173994bdc4b30d99798ab05def";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Documents\\Universidad Nacional de Colombia\\2023 - 1\\BOOTCAMP_BACKEND\\Final-Test\\config\\cors.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:19},end:{line:18,column:1}},"2":{start:{line:19,column:0},end:{line:19,column:29}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0},f:{},b:{},inputSourceMap:{version:3,file:"cors.js",sourceRoot:"",sources:["cors.ts"],names:[],mappings:";;AASA,MAAM,UAAU,GAAe;IAa7B,OAAO,EAAE,KAAK;IAwBd,MAAM,EAAE,IAAI;IAYZ,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;IAmBjD,OAAO,EAAE,IAAI;IAsBb,aAAa,EAAE;QACb,eAAe;QACf,kBAAkB;QAClB,cAAc;QACd,SAAS;QACT,eAAe;QACf,QAAQ;KACT;IAaD,WAAW,EAAE,IAAI;IAWjB,MAAM,EAAE,EAAE;CACX,CAAA;AAED,kBAAe,UAAU,CAAA",sourcesContent:["/**\n * Config source: https://git.io/JfefC\n *\n * Feel free to let us know via PR, if you find something broken in this config\n * file.\n */\n\nimport type { CorsConfig } from '@ioc:Adonis/Core/Cors'\n\nconst corsConfig: CorsConfig = {\n  /*\n  |--------------------------------------------------------------------------\n  | Enabled\n  |--------------------------------------------------------------------------\n  |\n  | A boolean to enable or disable CORS integration from your AdonisJs\n  | application.\n  |\n  | Setting the value to `true` will enable the CORS for all HTTP request. However,\n  | you can define a function to enable/disable it on per request basis as well.\n  |\n  */\n  enabled: false,\n\n  // You can also use a function that return true or false.\n  // enabled: (request) => request.url().startsWith('/api')\n\n  /*\n  |--------------------------------------------------------------------------\n  | Origin\n  |--------------------------------------------------------------------------\n  |\n  | Set a list of origins to be allowed for `Access-Control-Allow-Origin`.\n  | The value can be one of the following:\n  |\n  | https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\n  |\n  | Boolean (true)    - Allow current request origin.\n  | Boolean (false)   - Disallow all.\n  | String            - Comma separated list of allowed origins.\n  | Array             - An array of allowed origins.\n  | String (*)        - A wildcard (*) to allow all request origins.\n  | Function          - Receives the current origin string and should return\n  |                     one of the above values.\n  |\n  */\n  origin: true,\n\n  /*\n  |--------------------------------------------------------------------------\n  | Methods\n  |--------------------------------------------------------------------------\n  |\n  | An array of allowed HTTP methods for CORS. The `Access-Control-Request-Method`\n  | is checked against the following list.\n  |\n  | Following is the list of default methods. Feel free to add more.\n  */\n  methods: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE'],\n\n  /*\n  |--------------------------------------------------------------------------\n  | Headers\n  |--------------------------------------------------------------------------\n  |\n  | List of headers to be allowed for `Access-Control-Allow-Headers` header.\n  | The value can be one of the following:\n  |\n  | https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Headers\n  |\n  | Boolean(true)     - Allow all headers mentioned in `Access-Control-Request-Headers`.\n  | Boolean(false)    - Disallow all headers.\n  | String            - Comma separated list of allowed headers.\n  | Array             - An array of allowed headers.\n  | Function          - Receives the current header and should return one of the above values.\n  |\n  */\n  headers: true,\n\n  /*\n  |--------------------------------------------------------------------------\n  | Expose Headers\n  |--------------------------------------------------------------------------\n  |\n  | A list of headers to be exposed by setting `Access-Control-Expose-Headers`.\n  | header. By default following 6 simple response headers are exposed.\n  |\n  | Cache-Control\n  | Content-Language\n  | Content-Type\n  | Expires\n  | Last-Modified\n  | Pragma\n  |\n  | In order to add more headers, simply define them inside the following array.\n  |\n  | https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers\n  |\n  */\n  exposeHeaders: [\n    'cache-control',\n    'content-language',\n    'content-type',\n    'expires',\n    'last-modified',\n    'pragma',\n  ],\n\n  /*\n  |--------------------------------------------------------------------------\n  | Credentials\n  |--------------------------------------------------------------------------\n  |\n  | Toggle `Access-Control-Allow-Credentials` header. If value is set to `true`,\n  | then header will be set, otherwise not.\n  |\n  | https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials\n  |\n  */\n  credentials: true,\n\n  /*\n  |--------------------------------------------------------------------------\n  | MaxAge\n  |--------------------------------------------------------------------------\n  |\n  | Define `Access-Control-Max-Age` header in seconds.\n  | https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age\n  |\n  */\n  maxAge: 90,\n}\n\nexport default corsConfig\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c1be2cdb9f86e4173994bdc4b30d99798ab05def"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2oreg9t01w=function(){return actualCoverage;};}return actualCoverage;}cov_2oreg9t01w();cov_2oreg9t01w().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const corsConfig=(cov_2oreg9t01w().s[1]++,{enabled:false,origin:true,methods:['GET','HEAD','POST','PUT','DELETE'],headers:true,exposeHeaders:['cache-control','content-language','content-type','expires','last-modified','pragma'],credentials:true,maxAge:90});cov_2oreg9t01w().s[2]++;exports.default=corsConfig;//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFTQSxNQUFNLFVBQVUsR0FBZTtJQWE3QixPQUFPLEVBQUUsS0FBSztJQXdCZCxNQUFNLEVBQUUsSUFBSTtJQVlaLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUM7SUFtQmpELE9BQU8sRUFBRSxJQUFJO0lBc0JiLGFBQWEsRUFBRTtRQUNiLGVBQWU7UUFDZixrQkFBa0I7UUFDbEIsY0FBYztRQUNkLFNBQVM7UUFDVCxlQUFlO1FBQ2YsUUFBUTtLQUNUO0lBYUQsV0FBVyxFQUFFLElBQUk7SUFXakIsTUFBTSxFQUFFLEVBQUU7Q0FDWCxDQUFBO0FBRUQsa0JBQWUsVUFBVSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25maWcgc291cmNlOiBodHRwczovL2dpdC5pby9KZmVmQ1xuICpcbiAqIEZlZWwgZnJlZSB0byBsZXQgdXMga25vdyB2aWEgUFIsIGlmIHlvdSBmaW5kIHNvbWV0aGluZyBicm9rZW4gaW4gdGhpcyBjb25maWdcbiAqIGZpbGUuXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBDb3JzQ29uZmlnIH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9Db3JzJ1xuXG5jb25zdCBjb3JzQ29uZmlnOiBDb3JzQ29uZmlnID0ge1xuICAvKlxuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfCBFbmFibGVkXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB8XG4gIHwgQSBib29sZWFuIHRvIGVuYWJsZSBvciBkaXNhYmxlIENPUlMgaW50ZWdyYXRpb24gZnJvbSB5b3VyIEFkb25pc0pzXG4gIHwgYXBwbGljYXRpb24uXG4gIHxcbiAgfCBTZXR0aW5nIHRoZSB2YWx1ZSB0byBgdHJ1ZWAgd2lsbCBlbmFibGUgdGhlIENPUlMgZm9yIGFsbCBIVFRQIHJlcXVlc3QuIEhvd2V2ZXIsXG4gIHwgeW91IGNhbiBkZWZpbmUgYSBmdW5jdGlvbiB0byBlbmFibGUvZGlzYWJsZSBpdCBvbiBwZXIgcmVxdWVzdCBiYXNpcyBhcyB3ZWxsLlxuICB8XG4gICovXG4gIGVuYWJsZWQ6IGZhbHNlLFxuXG4gIC8vIFlvdSBjYW4gYWxzbyB1c2UgYSBmdW5jdGlvbiB0aGF0IHJldHVybiB0cnVlIG9yIGZhbHNlLlxuICAvLyBlbmFibGVkOiAocmVxdWVzdCkgPT4gcmVxdWVzdC51cmwoKS5zdGFydHNXaXRoKCcvYXBpJylcblxuICAvKlxuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfCBPcmlnaW5cbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHxcbiAgfCBTZXQgYSBsaXN0IG9mIG9yaWdpbnMgdG8gYmUgYWxsb3dlZCBmb3IgYEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbmAuXG4gIHwgVGhlIHZhbHVlIGNhbiBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAgfFxuICB8IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cbiAgfFxuICB8IEJvb2xlYW4gKHRydWUpICAgIC0gQWxsb3cgY3VycmVudCByZXF1ZXN0IG9yaWdpbi5cbiAgfCBCb29sZWFuIChmYWxzZSkgICAtIERpc2FsbG93IGFsbC5cbiAgfCBTdHJpbmcgICAgICAgICAgICAtIENvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIGFsbG93ZWQgb3JpZ2lucy5cbiAgfCBBcnJheSAgICAgICAgICAgICAtIEFuIGFycmF5IG9mIGFsbG93ZWQgb3JpZ2lucy5cbiAgfCBTdHJpbmcgKCopICAgICAgICAtIEEgd2lsZGNhcmQgKCopIHRvIGFsbG93IGFsbCByZXF1ZXN0IG9yaWdpbnMuXG4gIHwgRnVuY3Rpb24gICAgICAgICAgLSBSZWNlaXZlcyB0aGUgY3VycmVudCBvcmlnaW4gc3RyaW5nIGFuZCBzaG91bGQgcmV0dXJuXG4gIHwgICAgICAgICAgICAgICAgICAgICBvbmUgb2YgdGhlIGFib3ZlIHZhbHVlcy5cbiAgfFxuICAqL1xuICBvcmlnaW46IHRydWUsXG5cbiAgLypcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHwgTWV0aG9kc1xuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfFxuICB8IEFuIGFycmF5IG9mIGFsbG93ZWQgSFRUUCBtZXRob2RzIGZvciBDT1JTLiBUaGUgYEFjY2Vzcy1Db250cm9sLVJlcXVlc3QtTWV0aG9kYFxuICB8IGlzIGNoZWNrZWQgYWdhaW5zdCB0aGUgZm9sbG93aW5nIGxpc3QuXG4gIHxcbiAgfCBGb2xsb3dpbmcgaXMgdGhlIGxpc3Qgb2YgZGVmYXVsdCBtZXRob2RzLiBGZWVsIGZyZWUgdG8gYWRkIG1vcmUuXG4gICovXG4gIG1ldGhvZHM6IFsnR0VUJywgJ0hFQUQnLCAnUE9TVCcsICdQVVQnLCAnREVMRVRFJ10sXG5cbiAgLypcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHwgSGVhZGVyc1xuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfFxuICB8IExpc3Qgb2YgaGVhZGVycyB0byBiZSBhbGxvd2VkIGZvciBgQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc2AgaGVhZGVyLlxuICB8IFRoZSB2YWx1ZSBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XG4gIHxcbiAgfCBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtUmVxdWVzdC1IZWFkZXJzXG4gIHxcbiAgfCBCb29sZWFuKHRydWUpICAgICAtIEFsbG93IGFsbCBoZWFkZXJzIG1lbnRpb25lZCBpbiBgQWNjZXNzLUNvbnRyb2wtUmVxdWVzdC1IZWFkZXJzYC5cbiAgfCBCb29sZWFuKGZhbHNlKSAgICAtIERpc2FsbG93IGFsbCBoZWFkZXJzLlxuICB8IFN0cmluZyAgICAgICAgICAgIC0gQ29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgYWxsb3dlZCBoZWFkZXJzLlxuICB8IEFycmF5ICAgICAgICAgICAgIC0gQW4gYXJyYXkgb2YgYWxsb3dlZCBoZWFkZXJzLlxuICB8IEZ1bmN0aW9uICAgICAgICAgIC0gUmVjZWl2ZXMgdGhlIGN1cnJlbnQgaGVhZGVyIGFuZCBzaG91bGQgcmV0dXJuIG9uZSBvZiB0aGUgYWJvdmUgdmFsdWVzLlxuICB8XG4gICovXG4gIGhlYWRlcnM6IHRydWUsXG5cbiAgLypcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHwgRXhwb3NlIEhlYWRlcnNcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHxcbiAgfCBBIGxpc3Qgb2YgaGVhZGVycyB0byBiZSBleHBvc2VkIGJ5IHNldHRpbmcgYEFjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzYC5cbiAgfCBoZWFkZXIuIEJ5IGRlZmF1bHQgZm9sbG93aW5nIDYgc2ltcGxlIHJlc3BvbnNlIGhlYWRlcnMgYXJlIGV4cG9zZWQuXG4gIHxcbiAgfCBDYWNoZS1Db250cm9sXG4gIHwgQ29udGVudC1MYW5ndWFnZVxuICB8IENvbnRlbnQtVHlwZVxuICB8IEV4cGlyZXNcbiAgfCBMYXN0LU1vZGlmaWVkXG4gIHwgUHJhZ21hXG4gIHxcbiAgfCBJbiBvcmRlciB0byBhZGQgbW9yZSBoZWFkZXJzLCBzaW1wbHkgZGVmaW5lIHRoZW0gaW5zaWRlIHRoZSBmb2xsb3dpbmcgYXJyYXkuXG4gIHxcbiAgfCBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnNcbiAgfFxuICAqL1xuICBleHBvc2VIZWFkZXJzOiBbXG4gICAgJ2NhY2hlLWNvbnRyb2wnLFxuICAgICdjb250ZW50LWxhbmd1YWdlJyxcbiAgICAnY29udGVudC10eXBlJyxcbiAgICAnZXhwaXJlcycsXG4gICAgJ2xhc3QtbW9kaWZpZWQnLFxuICAgICdwcmFnbWEnLFxuICBdLFxuXG4gIC8qXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB8IENyZWRlbnRpYWxzXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB8XG4gIHwgVG9nZ2xlIGBBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFsc2AgaGVhZGVyLiBJZiB2YWx1ZSBpcyBzZXQgdG8gYHRydWVgLFxuICB8IHRoZW4gaGVhZGVyIHdpbGwgYmUgc2V0LCBvdGhlcndpc2Ugbm90LlxuICB8XG4gIHwgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXG4gIHxcbiAgKi9cbiAgY3JlZGVudGlhbHM6IHRydWUsXG5cbiAgLypcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHwgTWF4QWdlXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB8XG4gIHwgRGVmaW5lIGBBY2Nlc3MtQ29udHJvbC1NYXgtQWdlYCBoZWFkZXIgaW4gc2Vjb25kcy5cbiAgfCBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtTWF4LUFnZVxuICB8XG4gICovXG4gIG1heEFnZTogOTAsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcnNDb25maWdcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMm9yZWc5dDAxdyIsImFjdHVhbENvdmVyYWdlIiwicyIsImNvcnNDb25maWciLCJlbmFibGVkIiwib3JpZ2luIiwibWV0aG9kcyIsImhlYWRlcnMiLCJleHBvc2VIZWFkZXJzIiwiY3JlZGVudGlhbHMiLCJtYXhBZ2UiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbImNvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25maWcgc291cmNlOiBodHRwczovL2dpdC5pby9KZmVmQ1xuICpcbiAqIEZlZWwgZnJlZSB0byBsZXQgdXMga25vdyB2aWEgUFIsIGlmIHlvdSBmaW5kIHNvbWV0aGluZyBicm9rZW4gaW4gdGhpcyBjb25maWdcbiAqIGZpbGUuXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBDb3JzQ29uZmlnIH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9Db3JzJ1xuXG5jb25zdCBjb3JzQ29uZmlnOiBDb3JzQ29uZmlnID0ge1xuICAvKlxuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfCBFbmFibGVkXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB8XG4gIHwgQSBib29sZWFuIHRvIGVuYWJsZSBvciBkaXNhYmxlIENPUlMgaW50ZWdyYXRpb24gZnJvbSB5b3VyIEFkb25pc0pzXG4gIHwgYXBwbGljYXRpb24uXG4gIHxcbiAgfCBTZXR0aW5nIHRoZSB2YWx1ZSB0byBgdHJ1ZWAgd2lsbCBlbmFibGUgdGhlIENPUlMgZm9yIGFsbCBIVFRQIHJlcXVlc3QuIEhvd2V2ZXIsXG4gIHwgeW91IGNhbiBkZWZpbmUgYSBmdW5jdGlvbiB0byBlbmFibGUvZGlzYWJsZSBpdCBvbiBwZXIgcmVxdWVzdCBiYXNpcyBhcyB3ZWxsLlxuICB8XG4gICovXG4gIGVuYWJsZWQ6IGZhbHNlLFxuXG4gIC8vIFlvdSBjYW4gYWxzbyB1c2UgYSBmdW5jdGlvbiB0aGF0IHJldHVybiB0cnVlIG9yIGZhbHNlLlxuICAvLyBlbmFibGVkOiAocmVxdWVzdCkgPT4gcmVxdWVzdC51cmwoKS5zdGFydHNXaXRoKCcvYXBpJylcblxuICAvKlxuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfCBPcmlnaW5cbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHxcbiAgfCBTZXQgYSBsaXN0IG9mIG9yaWdpbnMgdG8gYmUgYWxsb3dlZCBmb3IgYEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbmAuXG4gIHwgVGhlIHZhbHVlIGNhbiBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAgfFxuICB8IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cbiAgfFxuICB8IEJvb2xlYW4gKHRydWUpICAgIC0gQWxsb3cgY3VycmVudCByZXF1ZXN0IG9yaWdpbi5cbiAgfCBCb29sZWFuIChmYWxzZSkgICAtIERpc2FsbG93IGFsbC5cbiAgfCBTdHJpbmcgICAgICAgICAgICAtIENvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIGFsbG93ZWQgb3JpZ2lucy5cbiAgfCBBcnJheSAgICAgICAgICAgICAtIEFuIGFycmF5IG9mIGFsbG93ZWQgb3JpZ2lucy5cbiAgfCBTdHJpbmcgKCopICAgICAgICAtIEEgd2lsZGNhcmQgKCopIHRvIGFsbG93IGFsbCByZXF1ZXN0IG9yaWdpbnMuXG4gIHwgRnVuY3Rpb24gICAgICAgICAgLSBSZWNlaXZlcyB0aGUgY3VycmVudCBvcmlnaW4gc3RyaW5nIGFuZCBzaG91bGQgcmV0dXJuXG4gIHwgICAgICAgICAgICAgICAgICAgICBvbmUgb2YgdGhlIGFib3ZlIHZhbHVlcy5cbiAgfFxuICAqL1xuICBvcmlnaW46IHRydWUsXG5cbiAgLypcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHwgTWV0aG9kc1xuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfFxuICB8IEFuIGFycmF5IG9mIGFsbG93ZWQgSFRUUCBtZXRob2RzIGZvciBDT1JTLiBUaGUgYEFjY2Vzcy1Db250cm9sLVJlcXVlc3QtTWV0aG9kYFxuICB8IGlzIGNoZWNrZWQgYWdhaW5zdCB0aGUgZm9sbG93aW5nIGxpc3QuXG4gIHxcbiAgfCBGb2xsb3dpbmcgaXMgdGhlIGxpc3Qgb2YgZGVmYXVsdCBtZXRob2RzLiBGZWVsIGZyZWUgdG8gYWRkIG1vcmUuXG4gICovXG4gIG1ldGhvZHM6IFsnR0VUJywgJ0hFQUQnLCAnUE9TVCcsICdQVVQnLCAnREVMRVRFJ10sXG5cbiAgLypcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHwgSGVhZGVyc1xuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfFxuICB8IExpc3Qgb2YgaGVhZGVycyB0byBiZSBhbGxvd2VkIGZvciBgQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc2AgaGVhZGVyLlxuICB8IFRoZSB2YWx1ZSBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XG4gIHxcbiAgfCBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtUmVxdWVzdC1IZWFkZXJzXG4gIHxcbiAgfCBCb29sZWFuKHRydWUpICAgICAtIEFsbG93IGFsbCBoZWFkZXJzIG1lbnRpb25lZCBpbiBgQWNjZXNzLUNvbnRyb2wtUmVxdWVzdC1IZWFkZXJzYC5cbiAgfCBCb29sZWFuKGZhbHNlKSAgICAtIERpc2FsbG93IGFsbCBoZWFkZXJzLlxuICB8IFN0cmluZyAgICAgICAgICAgIC0gQ29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgYWxsb3dlZCBoZWFkZXJzLlxuICB8IEFycmF5ICAgICAgICAgICAgIC0gQW4gYXJyYXkgb2YgYWxsb3dlZCBoZWFkZXJzLlxuICB8IEZ1bmN0aW9uICAgICAgICAgIC0gUmVjZWl2ZXMgdGhlIGN1cnJlbnQgaGVhZGVyIGFuZCBzaG91bGQgcmV0dXJuIG9uZSBvZiB0aGUgYWJvdmUgdmFsdWVzLlxuICB8XG4gICovXG4gIGhlYWRlcnM6IHRydWUsXG5cbiAgLypcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHwgRXhwb3NlIEhlYWRlcnNcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHxcbiAgfCBBIGxpc3Qgb2YgaGVhZGVycyB0byBiZSBleHBvc2VkIGJ5IHNldHRpbmcgYEFjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzYC5cbiAgfCBoZWFkZXIuIEJ5IGRlZmF1bHQgZm9sbG93aW5nIDYgc2ltcGxlIHJlc3BvbnNlIGhlYWRlcnMgYXJlIGV4cG9zZWQuXG4gIHxcbiAgfCBDYWNoZS1Db250cm9sXG4gIHwgQ29udGVudC1MYW5ndWFnZVxuICB8IENvbnRlbnQtVHlwZVxuICB8IEV4cGlyZXNcbiAgfCBMYXN0LU1vZGlmaWVkXG4gIHwgUHJhZ21hXG4gIHxcbiAgfCBJbiBvcmRlciB0byBhZGQgbW9yZSBoZWFkZXJzLCBzaW1wbHkgZGVmaW5lIHRoZW0gaW5zaWRlIHRoZSBmb2xsb3dpbmcgYXJyYXkuXG4gIHxcbiAgfCBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnNcbiAgfFxuICAqL1xuICBleHBvc2VIZWFkZXJzOiBbXG4gICAgJ2NhY2hlLWNvbnRyb2wnLFxuICAgICdjb250ZW50LWxhbmd1YWdlJyxcbiAgICAnY29udGVudC10eXBlJyxcbiAgICAnZXhwaXJlcycsXG4gICAgJ2xhc3QtbW9kaWZpZWQnLFxuICAgICdwcmFnbWEnLFxuICBdLFxuXG4gIC8qXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB8IENyZWRlbnRpYWxzXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB8XG4gIHwgVG9nZ2xlIGBBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFsc2AgaGVhZGVyLiBJZiB2YWx1ZSBpcyBzZXQgdG8gYHRydWVgLFxuICB8IHRoZW4gaGVhZGVyIHdpbGwgYmUgc2V0LCBvdGhlcndpc2Ugbm90LlxuICB8XG4gIHwgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXG4gIHxcbiAgKi9cbiAgY3JlZGVudGlhbHM6IHRydWUsXG5cbiAgLypcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHwgTWF4QWdlXG4gIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB8XG4gIHwgRGVmaW5lIGBBY2Nlc3MtQ29udHJvbC1NYXgtQWdlYCBoZWFkZXIgaW4gc2Vjb25kcy5cbiAgfCBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtTWF4LUFnZVxuICB8XG4gICovXG4gIG1heEFnZTogOTAsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcnNDb25maWdcbiJdLCJtYXBwaW5ncyI6Imd2TEF1SEU7QUFBQUEsY0FBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxjQUFBLEdBQUFBLGNBQUEsR0FBQUUsQ0FBQSxNLHlEQTlHRixLQUFNLENBQUFDLFVBQVUsRUFBQUgsY0FBQSxHQUFBRSxDQUFBLE1BQWUsQ0FhN0JFLE9BQU8sQ0FBRSxLQUFLLENBd0JkQyxNQUFNLENBQUUsSUFBSSxDQVlaQyxPQUFPLENBQUUsQ0FBQyxLQUFLLENBQUUsTUFBTSxDQUFFLE1BQU0sQ0FBRSxLQUFLLENBQUUsUUFBUSxDQUFDLENBbUJqREMsT0FBTyxDQUFFLElBQUksQ0FzQmJDLGFBQWEsQ0FBRSxDQUNiLGVBQWUsQ0FDZixrQkFBa0IsQ0FDbEIsY0FBYyxDQUNkLFNBQVMsQ0FDVCxlQUFlLENBQ2YsUUFBUSxDQUNULENBYURDLFdBQVcsQ0FBRSxJQUFJLENBV2pCQyxNQUFNLENBQUUsRSxDQUNULEVBQUFWLGNBQUEsR0FBQUUsQ0FBQSxNQUVEUyxPQUFBLENBQUFDLE9BQUEsQ0FBZVQsVUFBVSxDIn0=
"use strict";function cov_605k9qb35(){var path="D:\\Documents\\Universidad Nacional de Colombia\\2023 - 1\\BOOTCAMP_BACKEND\\Final-Test\\config\\bodyparser.ts";var hash="3ac927dde807602774b6338a16fadf7af416d382";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Documents\\Universidad Nacional de Colombia\\2023 - 1\\BOOTCAMP_BACKEND\\Final-Test\\config\\bodyparser.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:25},end:{line:44,column:1}},"2":{start:{line:45,column:0},end:{line:45,column:35}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0},f:{},b:{},inputSourceMap:{version:3,file:"bodyparser.js",sourceRoot:"",sources:["bodyparser.ts"],names:[],mappings:";;AASA,MAAM,gBAAgB,GAAqB;IAUzC,kBAAkB,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC;IAWtD,IAAI,EAAE;QACJ,QAAQ,EAAE,OAAO;QACjB,KAAK,EAAE,KAAK;QACZ,MAAM,EAAE,IAAI;QACZ,KAAK,EAAE;YACL,kBAAkB;YAClB,6BAA6B;YAC7B,0BAA0B;YAC1B,wBAAwB;SACzB;KACF;IAWD,IAAI,EAAE;QACJ,QAAQ,EAAE,OAAO;QACjB,KAAK,EAAE,KAAK;QACZ,WAAW,EAAE,EAAE;QAYf,yBAAyB,EAAE,IAAI;QAE/B,KAAK,EAAE;YACL,mCAAmC;SACpC;KACF;IAYD,GAAG,EAAE;QACH,QAAQ,EAAE,OAAO;QACjB,KAAK,EAAE,KAAK;QACZ,WAAW,EAAE,EAAE;QACf,KAAK,EAAE;YACL,QAAQ;SACT;KACF;IAWD,SAAS,EAAE;QAcT,WAAW,EAAE,IAAI;QAsBjB,eAAe,EAAE,EAAE;QAuBnB,QAAQ,EAAE,OAAO;QAYjB,yBAAyB,EAAE,IAAI;QAW/B,SAAS,EAAE,IAAI;QAWf,KAAK,EAAE,MAAM;QAUb,KAAK,EAAE;YACL,qBAAqB;SACtB;KACF;CACF,CAAA;AAED,kBAAe,gBAAgB,CAAA",sourcesContent:["/**\n * Config source: https://git.io/Jfefn\n *\n * Feel free to let us know via PR, if you find something broken in this config\n * file.\n */\n\nimport type { BodyParserConfig } from '@ioc:Adonis/Core/BodyParser'\n\nconst bodyParserConfig: BodyParserConfig = {\n  /*\n  |--------------------------------------------------------------------------\n  | White listed methods\n  |--------------------------------------------------------------------------\n  |\n  | HTTP methods for which body parsing must be performed. It is a good practice\n  | to avoid body parsing for `GET` requests.\n  |\n  */\n  whitelistedMethods: ['POST', 'PUT', 'PATCH', 'DELETE'],\n\n  /*\n  |--------------------------------------------------------------------------\n  | JSON parser settings\n  |--------------------------------------------------------------------------\n  |\n  | The settings for the JSON parser. The types defines the request content\n  | types which gets processed by the JSON parser.\n  |\n  */\n  json: {\n    encoding: 'utf-8',\n    limit: '1mb',\n    strict: true,\n    types: [\n      'application/json',\n      'application/json-patch+json',\n      'application/vnd.api+json',\n      'application/csp-report',\n    ],\n  },\n\n  /*\n  |--------------------------------------------------------------------------\n  | Form parser settings\n  |--------------------------------------------------------------------------\n  |\n  | The settings for the `application/x-www-form-urlencoded` parser. The types\n  | defines the request content types which gets processed by the form parser.\n  |\n  */\n  form: {\n    encoding: 'utf-8',\n    limit: '1mb',\n    queryString: {},\n\n    /*\n    |--------------------------------------------------------------------------\n    | Convert empty strings to null\n    |--------------------------------------------------------------------------\n    |\n    | Convert empty form fields to null. HTML forms results in field string\n    | value when the field is left blank. This option normalizes all the blank\n    | field values to \"null\"\n    |\n    */\n    convertEmptyStringsToNull: true,\n\n    types: [\n      'application/x-www-form-urlencoded',\n    ],\n  },\n\n  /*\n  |--------------------------------------------------------------------------\n  | Raw body parser settings\n  |--------------------------------------------------------------------------\n  |\n  | Raw body just reads the request body stream as a plain text, which you\n  | can process by hand. This must be used when request body type is not\n  | supported by the body parser.\n  |\n  */\n  raw: {\n    encoding: 'utf-8',\n    limit: '1mb',\n    queryString: {},\n    types: [\n      'text/*',\n    ],\n  },\n\n  /*\n  |--------------------------------------------------------------------------\n  | Multipart parser settings\n  |--------------------------------------------------------------------------\n  |\n  | The settings for the `multipart/form-data` parser. The types defines the\n  | request content types which gets processed by the form parser.\n  |\n  */\n  multipart: {\n    /*\n    |--------------------------------------------------------------------------\n    | Auto process\n    |--------------------------------------------------------------------------\n    |\n    | The auto process option will process uploaded files and writes them to\n    | the `tmp` folder. You can turn it off and then manually use the stream\n    | to pipe stream to a different destination.\n    |\n    | It is recommended to keep `autoProcess=true`. Unless you are processing bigger\n    | file sizes.\n    |\n    */\n    autoProcess: true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Files to be processed manually\n    |--------------------------------------------------------------------------\n    |\n    | You can turn off `autoProcess` for certain routes by defining\n    | routes inside the following array.\n    |\n    | NOTE: Make sure the route pattern starts with a leading slash.\n    |\n    | Correct\n    | ```js\n    | /projects/:id/file\n    | ```\n    |\n    | Incorrect\n    | ```js\n    | projects/:id/file\n    | ```\n    */\n    processManually: [],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Temporary file name\n    |--------------------------------------------------------------------------\n    |\n    | When auto processing is on. We will use this method to compute the temporary\n    | file name. AdonisJs will compute a unique `tmpPath` for you automatically,\n    | However, you can also define your own custom method.\n    |\n    */\n    // tmpFileName () {\n    // },\n\n    /*\n    |--------------------------------------------------------------------------\n    | Encoding\n    |--------------------------------------------------------------------------\n    |\n    | Request body encoding\n    |\n    */\n    encoding: 'utf-8',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Convert empty strings to null\n    |--------------------------------------------------------------------------\n    |\n    | Convert empty form fields to null. HTML forms results in field string\n    | value when the field is left blank. This option normalizes all the blank\n    | field values to \"null\"\n    |\n    */\n    convertEmptyStringsToNull: true,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Max Fields\n    |--------------------------------------------------------------------------\n    |\n    | The maximum number of fields allowed in the request body. The field includes\n    | text inputs and files both.\n    |\n    */\n    maxFields: 1000,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Request body limit\n    |--------------------------------------------------------------------------\n    |\n    | The total limit to the multipart body. This includes all request files\n    | and fields data.\n    |\n    */\n    limit: '20mb',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Types\n    |--------------------------------------------------------------------------\n    |\n    | The types that will be considered and parsed as multipart body.\n    |\n    */\n    types: [\n      'multipart/form-data',\n    ],\n  },\n}\n\nexport default bodyParserConfig\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3ac927dde807602774b6338a16fadf7af416d382"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_605k9qb35=function(){return actualCoverage;};}return actualCoverage;}cov_605k9qb35();cov_605k9qb35().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const bodyParserConfig=(cov_605k9qb35().s[1]++,{whitelistedMethods:['POST','PUT','PATCH','DELETE'],json:{encoding:'utf-8',limit:'1mb',strict:true,types:['application/json','application/json-patch+json','application/vnd.api+json','application/csp-report']},form:{encoding:'utf-8',limit:'1mb',queryString:{},convertEmptyStringsToNull:true,types:['application/x-www-form-urlencoded']},raw:{encoding:'utf-8',limit:'1mb',queryString:{},types:['text/*']},multipart:{autoProcess:true,processManually:[],encoding:'utf-8',convertEmptyStringsToNull:true,maxFields:1000,limit:'20mb',types:['multipart/form-data']}});cov_605k9qb35().s[2]++;exports.default=bodyParserConfig;//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
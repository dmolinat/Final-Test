{"version":3,"file":"AnswersController.js","sourceRoot":"","sources":["AnswersController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\nimport Answer from 'App/Models/Answer';\nimport Question from 'App/Models/Question';\nimport QuestionsController from './QuestionsController';\n\nexport default class AnswersController {\n  public async createAnswer({request,response}:HttpContextContract){\n    const {opcion,is_correct,state,question_id}=request.all()\n    try{\n      const answerObj = new Answer();\n      answerObj.opcion = opcion;\n      answerObj.is_correct = is_correct;\n      answerObj.state = state\n      const state_question = await this.getValidarQuestion(question_id);\n      if(state_question==0){\n        return response.status(500).json({\"msg\": \"ERROR EN VALIDAR QUESTION\"})\n      }\n      answerObj.question_id=question_id\n\n      const L_question = await Question.query().select('question', 'options').where('id',question_id)\n      const options_question=L_question[0]['$attributes']['options']\n      const option = {opcion: answerObj['$attributes']['opcion'], iscorrect: answerObj['$attributes']['is_correct']}\n      options_question[options_question.length] = option\n      const question_aux = new QuestionsController()\n      question_aux.updateQuestionNewAnswer(question_id,options_question)\n\n      await answerObj.save();\n      return response.status(200).json({\"state\": true,\"message\": \"Pregunta creada exitosamente\"})\n    }catch(e){\n      return response.status(500).json({\"state\": false, \"message\": \"Error al crear answer\"})\n    }\n\n  }\n\n  public async createAnswerQuestion(question_id: Number,options: JSON[]){\n    try{\n      options.map((answer)=>{\n        const answer_new = new Answer()\n        answer_new.opcion = answer['opcion']\n        answer_new.is_correct = answer['iscorrect']\n        answer_new.question_id = question_id\n        answer_new.state = true\n        answer_new.save()\n      })\n    }catch(e){\n      //console.log(`e -> ${e}`)\n    }\n  }\n\n  private async getValidarQuestion(question_id: Number): Promise<Number>{\n    const total = await Question.query().where({\"id\": question_id}).count('*')\n    return total.length;\n  }\n\n  public async updateAnswer({request,response}: HttpContextContract){\n    const id=request.param('id_opcion');\n    const {opcion, iscorrect} = request.all();\n    try{\n      await Answer.query().where('id',id).update({\n        opcion: opcion,\n        is_correct: iscorrect\n    });\n    //Actualizarlo en la pregunta\n    //Seleccionar las respuestas asociadas a la pregunta\n    //Extraer el question_id asociado a la pregunta\n    const L_answer = await Answer.query().select('question_id').where('id',id)\n    const question_id=L_answer[0]['$attributes']['question_id']\n    //Extraer la lista de preguntas\n    const L_answerquestions = await Answer.query().select('opcion','is_correct').where('question_id',question_id)\n    const op_aux=Array();\n    for(const i in L_answerquestions){\n      op_aux[op_aux.length] = {opcion: L_answerquestions[i]['$attributes']['opcion'], iscorrect:L_answerquestions[i]['$attributes']['is_correct']}\n    }\n\n    const question_aux = new QuestionsController()\n    question_aux.updateQuestionNewAnswer(question_id,op_aux)\n    return response.status(200).json({\"state\": true, \"message\": \"opcion Editada con exito\"})\n    }catch(e){\n      return response.status(500).json({\"state\": false,\"message\": \"Error al editar la opcion\"})\n    }\n  }\n\n  public async getOptions({request,response}: HttpContextContract){\n    const id=request.param('id_question');\n    try{\n      const L_answerquestions = await Answer.query().select('id','opcion').where('question_id',id)\n      response.status(200).json({\"state\": true, \"message\": \"Listado de opciones\", \"options\": L_answerquestions})\n    }catch(e){\n        return response.status(500).json({\"state\": false,\"message\": \"Error al obtener listado de opciones\"})\n    }\n  }\n\n}\n"]}